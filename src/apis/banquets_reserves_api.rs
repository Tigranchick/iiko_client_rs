/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`api1_reserve_add_items_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveAddItemsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_reserve_add_payments_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveAddPaymentsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_reserve_available_organizations_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveAvailableOrganizationsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_reserve_available_restaurant_sections_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveAvailableRestaurantSectionsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_reserve_available_terminal_groups_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveAvailableTerminalGroupsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_reserve_cancel_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveCancelPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_reserve_create_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveCreatePostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_reserve_restaurant_sections_workload_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveRestaurantSectionsWorkloadPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_reserve_status_by_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ReserveStatusByIdPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// Available only for banquets.   > Allowed from version `8.2.6`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: changing`.
pub async fn api1_reserve_add_items_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    add_order_items_to_banquet_request: Option<models::AddOrderItemsToBanquetRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1ReserveAddItemsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_add_order_items_to_banquet_request = add_order_items_to_banquet_request;

    let uri_str = format!("{}/api/1/reserve/add_items", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_add_order_items_to_banquet_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveAddItemsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Available only for banquets.   > Allowed from version `8.2.6`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order payments: changing`.
pub async fn api1_reserve_add_payments_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    add_order_payments_to_banquet_request: Option<models::AddOrderPaymentsToBanquetRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1ReserveAddPaymentsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_add_order_payments_to_banquet_request = add_order_payments_to_banquet_request;

    let uri_str = format!("{}/api/1/reserve/add_payments", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_add_order_payments_to_banquet_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveAddPaymentsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.1.5`.   > Restriction group: `Orders: preparing`.
pub async fn api1_reserve_available_organizations_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    order_get_organizations_request: Option<models::OrderGetOrganizationsRequest>,
) -> Result<models::OrderGetOrganizationsResponse, Error<Api1ReserveAvailableOrganizationsPostError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_order_get_organizations_request = order_get_organizations_request;

    let uri_str = format!(
        "{}/api/1/reserve/available_organizations",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_order_get_organizations_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrderGetOrganizationsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrderGetOrganizationsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveAvailableOrganizationsPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.1.5`.   > Restriction group: `Orders: preparing`.
pub async fn api1_reserve_available_restaurant_sections_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    get_restaurant_sections_request: Option<models::GetRestaurantSectionsRequest>,
) -> Result<
    models::GetRestaurantSectionsResponse,
    Error<Api1ReserveAvailableRestaurantSectionsPostError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_get_restaurant_sections_request = get_restaurant_sections_request;

    let uri_str = format!(
        "{}/api/1/reserve/available_restaurant_sections",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_get_restaurant_sections_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetRestaurantSectionsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetRestaurantSectionsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveAvailableRestaurantSectionsPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.1.5`.   > Restriction group: `Orders: preparing`.
pub async fn api1_reserve_available_terminal_groups_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    get_terminal_groups_by_organizations_request: Option<
        models::GetTerminalGroupsByOrganizationsRequest,
    >,
) -> Result<models::TerminalGroupsResponse, Error<Api1ReserveAvailableTerminalGroupsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_get_terminal_groups_by_organizations_request =
        get_terminal_groups_by_organizations_request;

    let uri_str = format!(
        "{}/api/1/reserve/available_terminal_groups",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_get_terminal_groups_by_organizations_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TerminalGroupsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TerminalGroupsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveAvailableTerminalGroupsPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Available only for reserves with status 'New'.   > Allowed from version `8.2.6`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order status: changing`.
pub async fn api1_reserve_cancel_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    cancel_reserve_request: Option<models::CancelReserveRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1ReserveCancelPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_cancel_reserve_request = cancel_reserve_request;

    let uri_str = format!("{}/api/1/reserve/cancel", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_cancel_reserve_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveCancelPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.1.5`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: creating`.
pub async fn api1_reserve_create_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    create_reserve_request: Option<models::CreateReserveRequest>,
) -> Result<models::ReserveResponse, Error<Api1ReserveCreatePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_create_reserve_request = create_reserve_request;

    let uri_str = format!("{}/api/1/reserve/create", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_create_reserve_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ReserveResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ReserveResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveCreatePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.1.5`.   > Restriction group: `Data: dictionaries`.
pub async fn api1_reserve_restaurant_sections_workload_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    get_restaurant_sections_workload_request: Option<models::GetRestaurantSectionsWorkloadRequest>,
) -> Result<
    models::GetRestaurantSectionsWorkloadResponse,
    Error<Api1ReserveRestaurantSectionsWorkloadPostError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_get_restaurant_sections_workload_request = get_restaurant_sections_workload_request;

    let uri_str = format!(
        "{}/api/1/reserve/restaurant_sections_workload",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_get_restaurant_sections_workload_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetRestaurantSectionsWorkloadResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetRestaurantSectionsWorkloadResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveRestaurantSectionsWorkloadPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.1.5`.   > Restriction group: `Orders: receiving`.
pub async fn api1_reserve_status_by_id_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    reserves_by_id_request: Option<models::ReservesByIdRequest>,
) -> Result<models::ReservesResponse, Error<Api1ReserveStatusByIdPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_reserves_by_id_request = reserves_by_id_request;

    let uri_str = format!("{}/api/1/reserve/status_by_id", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_reserves_by_id_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ReservesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ReservesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ReserveStatusByIdPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
