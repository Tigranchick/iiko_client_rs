/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`api1_combo_calculate_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ComboCalculatePostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_combo_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1ComboPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_nomenclature_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1NomenclaturePostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_stop_lists_add_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1StopListsAddPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_stop_lists_check_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1StopListsCheckPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_stop_lists_clear_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1StopListsClearPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_stop_lists_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1StopListsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_stop_lists_remove_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1StopListsRemovePostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api2_menu_by_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api2MenuByIdPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api2_menu_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api2MenuPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// Make combo price calculation.   > Restriction group: `Loyalty: order calculate`.
pub async fn api1_combo_calculate_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    calculate_combo_price_request: Option<models::CalculateComboPriceRequest>,
) -> Result<models::CalculateComboPriceResponse, Error<Api1ComboCalculatePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_calculate_combo_price_request = calculate_combo_price_request;

    let uri_str = format!("{}/api/1/combo/calculate", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_calculate_combo_price_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CalculateComboPriceResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CalculateComboPriceResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ComboCalculatePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get all organization's combos.   > Restriction group: `Data: menu`.
pub async fn api1_combo_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    get_combos_info_request: Option<models::GetCombosInfoRequest>,
) -> Result<models::GetCombosInfoResponse, Error<Api1ComboPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_get_combos_info_request = get_combos_info_request;

    let uri_str = format!("{}/api/1/combo", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_get_combos_info_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetCombosInfoResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetCombosInfoResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1ComboPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// > Sourced from RMS Data Exchange Export menu.   > Restriction group: `Data: menu`.
pub async fn api1_nomenclature_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    nomenclature_request: Option<models::NomenclatureRequest>,
) -> Result<models::NomenclatureResponse, Error<Api1NomenclaturePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_nomenclature_request = nomenclature_request;

    let uri_str = format!("{}/api/1/nomenclature", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_nomenclature_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NomenclatureResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NomenclatureResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1NomenclaturePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `8.6.1`.   > Restriction group: `Data: changing stoplists`.
pub async fn api1_stop_lists_add_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    add_products_to_stop_list_request: Option<models::AddProductsToStopListRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1StopListsAddPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_add_products_to_stop_list_request = add_products_to_stop_list_request;

    let uri_str = format!("{}/api/1/stop_lists/add", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_add_products_to_stop_list_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1StopListsAddPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Restriction group: `Orders: creating`.
pub async fn api1_stop_lists_check_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    check_stop_list_request: Option<models::CheckStopListRequest>,
) -> Result<models::CheckStopListResponse, Error<Api1StopListsCheckPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_check_stop_list_request = check_stop_list_request;

    let uri_str = format!("{}/api/1/stop_lists/check", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_check_stop_list_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CheckStopListResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CheckStopListResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1StopListsCheckPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `8.6.1`.   > Restriction group: `Data: changing stoplists`.
pub async fn api1_stop_lists_clear_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    clear_stop_list_request: Option<models::ClearStopListRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1StopListsClearPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_clear_stop_list_request = clear_stop_list_request;

    let uri_str = format!("{}/api/1/stop_lists/clear", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_clear_stop_list_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1StopListsClearPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Restriction group: `Data: stoplists`.
pub async fn api1_stop_lists_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    stop_lists_request: Option<models::StopListsRequest>,
) -> Result<models::StopListsResponse, Error<Api1StopListsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_stop_lists_request = stop_lists_request;

    let uri_str = format!("{}/api/1/stop_lists", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_stop_lists_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StopListsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StopListsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1StopListsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `8.6.1`.   > Restriction group: `Data: changing stoplists`.
pub async fn api1_stop_lists_remove_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    remove_products_from_stop_list_request: Option<models::RemoveProductsFromStopListRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1StopListsRemovePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_remove_products_from_stop_list_request = remove_products_from_stop_list_request;

    let uri_str = format!("{}/api/1/stop_lists/remove", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_remove_products_from_stop_list_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1StopListsRemovePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// > Sourced from Web External menu.   > Restriction group: `Data: menu`.
pub async fn api2_menu_by_id_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    menu_request: Option<models::MenuRequest>,
) -> Result<models::ExternalMenuPreset, Error<Api2MenuByIdPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_menu_request = menu_request;

    let uri_str = format!("{}/api/2/menu/by_id", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_menu_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ExternalMenuPreset`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ExternalMenuPreset`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api2MenuByIdPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Restriction group: `Data: menu`.
pub async fn api2_menu_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
) -> Result<models::MenusDataResponse, Error<Api2MenuPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;

    let uri_str = format!("{}/api/2/menu", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MenusDataResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MenusDataResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api2MenuPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
