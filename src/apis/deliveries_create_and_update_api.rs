/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`api1_deliveries_add_items_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesAddItemsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_add_payments_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesAddPaymentsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_cancel_confirmation_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesCancelConfirmationPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_cancel_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesCancelPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_change_comment_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesChangeCommentPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_change_complete_before_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesChangeCompleteBeforePostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_change_delivery_point_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesChangeDeliveryPointPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_change_driver_info_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesChangeDriverInfoPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_change_external_data_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesChangeExternalDataPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_change_operator_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesChangeOperatorPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_change_payments_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesChangePaymentsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_change_service_type_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesChangeServiceTypePostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_close_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesClosePostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_confirm_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesConfirmPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_create_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesCreatePostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_print_delivery_bill_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesPrintDeliveryBillPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_update_order_courier_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesUpdateOrderCourierPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_update_order_delivery_status_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesUpdateOrderDeliveryStatusPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_update_order_payments_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesUpdateOrderPaymentsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api1_deliveries_update_order_problem_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Api1DeliveriesUpdateOrderProblemPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status500(models::ErrorResponse),
    Status408(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

///    > Allowed from version `7.4.6`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: changing`.
pub async fn api1_deliveries_add_items_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_add_order_items_request: Option<models::RequestAddOrderItemsRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesAddItemsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_add_order_items_request = request_add_order_items_request;

    let uri_str = format!("{}/api/1/deliveries/add_items", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_add_order_items_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesAddItemsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `8.4.6`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order payments: changing`.
pub async fn api1_deliveries_add_payments_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    add_order_payments_request: Option<models::AddOrderPaymentsRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesAddPaymentsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_add_order_payments_request = add_order_payments_request;

    let uri_str = format!("{}/api/1/deliveries/add_payments", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_add_order_payments_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesAddPaymentsPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.6.1`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order status: changing`.
pub async fn api1_deliveries_cancel_confirmation_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_cancel_delivery_confirmation_request: Option<
        models::RequestUpdateOrderCancelDeliveryConfirmationRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesCancelConfirmationPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_cancel_delivery_confirmation_request =
        request_update_order_cancel_delivery_confirmation_request;

    let uri_str = format!(
        "{}/api/1/deliveries/cancel_confirmation",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_cancel_delivery_confirmation_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesCancelConfirmationPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.5.4`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order status: changing`.
pub async fn api1_deliveries_cancel_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_cancel_order_request: Option<models::RequestCancelOrderRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesCancelPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_cancel_order_request = request_cancel_order_request;

    let uri_str = format!("{}/api/1/deliveries/cancel", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_cancel_order_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesCancelPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.6.1`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: changing`.
pub async fn api1_deliveries_change_comment_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_change_delivery_comment_request: Option<
        models::RequestUpdateOrderChangeDeliveryCommentRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesChangeCommentPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_change_delivery_comment_request =
        request_update_order_change_delivery_comment_request;

    let uri_str = format!(
        "{}/api/1/deliveries/change_comment",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_change_delivery_comment_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesChangeCommentPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.5.4`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: changing`.
pub async fn api1_deliveries_change_complete_before_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_change_complete_before_request: Option<
        models::RequestUpdateOrderChangeCompleteBeforeRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesChangeCompleteBeforePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_change_complete_before_request =
        request_update_order_change_complete_before_request;

    let uri_str = format!(
        "{}/api/1/deliveries/change_complete_before",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_change_complete_before_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesChangeCompleteBeforePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.5.4`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: changing`.
pub async fn api1_deliveries_change_delivery_point_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_change_delivery_point_request: Option<
        models::RequestUpdateOrderChangeDeliveryPointRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesChangeDeliveryPointPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_change_delivery_point_request =
        request_update_order_change_delivery_point_request;

    let uri_str = format!(
        "{}/api/1/deliveries/change_delivery_point",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_change_delivery_point_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesChangeDeliveryPointPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `8.6.6`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order driver: changing`.
pub async fn api1_deliveries_change_driver_info_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_change_driver_info_request: Option<models::RequestChangeDriverInfoRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesChangeDriverInfoPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_change_driver_info_request = request_change_driver_info_request;

    let uri_str = format!(
        "{}/api/1/deliveries/change_driver_info",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_change_driver_info_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesChangeDriverInfoPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Restriction group: `Orders: changing`.
pub async fn api1_deliveries_change_external_data_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_change_external_data_request: Option<
        models::RequestUpdateOrderChangeExternalDataRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesChangeExternalDataPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_change_external_data_request =
        request_update_order_change_external_data_request;

    let uri_str = format!(
        "{}/api/1/deliveries/change_external_data",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_change_external_data_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesChangeExternalDataPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.6.1`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: changing`.
pub async fn api1_deliveries_change_operator_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_change_delivery_operator_request: Option<
        models::RequestUpdateOrderChangeDeliveryOperatorRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesChangeOperatorPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_change_delivery_operator_request =
        request_update_order_change_delivery_operator_request;

    let uri_str = format!(
        "{}/api/1/deliveries/change_operator",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_change_delivery_operator_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesChangeOperatorPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// > Method will fail if there are any processed payments in the order.  > If all payments in the order are unprocessed they will be removed and replaced with new ones.   > Allowed from version `7.6.3`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order payments: changing`.
pub async fn api1_deliveries_change_payments_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_change_payments_request: Option<
        models::RequestUpdateOrderChangePaymentsRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesChangePaymentsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_change_payments_request =
        request_update_order_change_payments_request;

    let uri_str = format!(
        "{}/api/1/deliveries/change_payments",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_change_payments_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesChangePaymentsPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.5.4`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: changing`.
pub async fn api1_deliveries_change_service_type_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_change_service_type_request: Option<
        models::RequestUpdateOrderChangeServiceTypeRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesChangeServiceTypePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_change_service_type_request =
        request_update_order_change_service_type_request;

    let uri_str = format!(
        "{}/api/1/deliveries/change_service_type",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_change_service_type_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesChangeServiceTypePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// > Before version `8.0.6` it's possible to close deliveries with `DeliveryByClient`  orderServiceType only, starting from version `8.0.6` it's also possible to close  `DeliveryByCourier` deiveries in the DeliveryStatus `OnWay` or `Delivered` .   > Allowed from version `7.4.6`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order status: changing`.
pub async fn api1_deliveries_close_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_close_delivery_order_request: Option<models::RequestCloseDeliveryOrderRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesClosePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_close_delivery_order_request = request_close_delivery_order_request;

    let uri_str = format!("{}/api/1/deliveries/close", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_close_delivery_order_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesClosePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.6.1`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order status: changing`.
pub async fn api1_deliveries_confirm_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_confirm_delivery_request: Option<
        models::RequestUpdateOrderConfirmDeliveryRequest,
    >,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesConfirmPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_confirm_delivery_request =
        request_update_order_confirm_delivery_request;

    let uri_str = format!("{}/api/1/deliveries/confirm", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_confirm_delivery_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesConfirmPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: creating`.
pub async fn api1_deliveries_create_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_create_order_request: Option<models::RequestCreateOrderRequest>,
) -> Result<models::OrderResponse, Error<Api1DeliveriesCreatePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_create_order_request = request_create_order_request;

    let uri_str = format!("{}/api/1/deliveries/create", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_create_order_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrderResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrderResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesCreatePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.6.1`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Orders: changing`.
pub async fn api1_deliveries_print_delivery_bill_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_print_delivery_bill_request: Option<models::RequestPrintDeliveryBillRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesPrintDeliveryBillPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_print_delivery_bill_request = request_print_delivery_bill_request;

    let uri_str = format!(
        "{}/api/1/deliveries/print_delivery_bill",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_print_delivery_bill_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesPrintDeliveryBillPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > Allowed from version `7.1.5`.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order driver: changing`.
pub async fn api1_deliveries_update_order_courier_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_courier_request: Option<models::RequestUpdateOrderCourierRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesUpdateOrderCourierPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_courier_request = request_update_order_courier_request;

    let uri_str = format!(
        "{}/api/1/deliveries/update_order_courier",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_courier_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesUpdateOrderCourierPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order status: changing`.
pub async fn api1_deliveries_update_order_delivery_status_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_delivery_status_request: Option<models::RequestUpdateDeliveryStatusRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesUpdateOrderDeliveryStatusPostError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_delivery_status_request = request_update_delivery_status_request;

    let uri_str = format!(
        "{}/api/1/deliveries/update_order_delivery_status",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_delivery_status_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesUpdateOrderDeliveryStatusPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// > Deprecated, use `api/1/deliveries/change_payments` method instead.   > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Deprecated`.
pub async fn api1_deliveries_update_order_payments_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_payments_request: Option<models::RequestUpdateOrderPaymentsRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesUpdateOrderPaymentsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_payments_request = request_update_order_payments_request;

    let uri_str = format!(
        "{}/api/1/deliveries/update_order_payments",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_payments_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesUpdateOrderPaymentsPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///    > This method is a command. Use `api/1/commands/status` method to get the progress status.   > Restriction group: `Order status: changing`.
pub async fn api1_deliveries_update_order_problem_post(
    configuration: &configuration::Configuration,
    authorization: &str,
    timeout: Option<i32>,
    request_update_order_problem_request: Option<models::RequestUpdateOrderProblemRequest>,
) -> Result<models::CorrelationIdResponse, Error<Api1DeliveriesUpdateOrderProblemPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_timeout = timeout;
    let p_request_update_order_problem_request = request_update_order_problem_request;

    let uri_str = format!(
        "{}/api/1/deliveries/update_order_problem",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Authorization", p_authorization.to_string());
    if let Some(param_value) = p_timeout {
        req_builder = req_builder.header("Timeout", param_value.to_string());
    }
    req_builder = req_builder.json(&p_request_update_order_problem_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CorrelationIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CorrelationIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Api1DeliveriesUpdateOrderProblemPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
