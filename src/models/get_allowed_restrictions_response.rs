/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetAllowedRestrictionsResponse : Response for a request to identify suitable terminal groups.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetAllowedRestrictionsResponse {
    /// Operation ID.
    #[serde(rename = "correlationId")]
    pub correlation_id: uuid::Uuid,
    /// A sign of successful verification.
    #[serde(rename = "isAllowed")]
    pub is_allowed: bool,
    /// Reject cause.
    #[serde(rename = "rejectCause", deserialize_with = "Option::deserialize")]
    pub reject_cause: Option<String>,
    /// Delivery address ID in external mapping system.
    #[serde(rename = "addressExternalId", deserialize_with = "Option::deserialize")]
    pub address_external_id: Option<String>,
    /// Coordinates returned by geocoding service.
    #[serde(rename = "location", deserialize_with = "Option::deserialize")]
    pub location: Option<Box<models::OrderLocation>>,
    /// Suitable terminal groups with a delivery duration for them.
    #[serde(rename = "allowedItems")]
    pub allowed_items: Vec<models::AllowedItemWithDuration>,
    /// Rejected items with cause.
    #[serde(rename = "rejectedItems")]
    pub rejected_items: Vec<models::RejectItem>,
}

impl GetAllowedRestrictionsResponse {
    /// Response for a request to identify suitable terminal groups.
    pub fn new(
        correlation_id: uuid::Uuid,
        is_allowed: bool,
        reject_cause: Option<String>,
        address_external_id: Option<String>,
        location: Option<models::OrderLocation>,
        allowed_items: Vec<models::AllowedItemWithDuration>,
        rejected_items: Vec<models::RejectItem>,
    ) -> GetAllowedRestrictionsResponse {
        GetAllowedRestrictionsResponse {
            correlation_id,
            is_allowed,
            reject_cause,
            address_external_id,
            location: if let Some(x) = location {
                Some(Box::new(x))
            } else {
                None
            },
            allowed_items,
            rejected_items,
        }
    }
}
