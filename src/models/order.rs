/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Order : Order details.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Order {
    /// ID of delivery serving as source for splitting by FCRs.
    #[serde(
        rename = "parentDeliveryId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_delivery_id: Option<Option<uuid::Uuid>>,
    /// Delivery customer.
    #[serde(
        rename = "customer",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer: Option<Option<Box<models::OrderCustomer>>>,
    /// Delivery phone number.
    #[serde(rename = "phone")]
    pub phone: String,
    /// Delivery point details.  <remarks>  Not required if order type is customer pickup. Otherwise, required.  </remarks>
    #[serde(
        rename = "deliveryPoint",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_point: Option<Option<Box<models::OrderDeliveryPoint>>>,
    /// Delivery status.                > Delivery status `ReadyForCooking` is deprecated from version `9.0.6`.
    #[serde(rename = "status")]
    pub status: models::DeliveryStatus,
    /// Delivery cancellation details.  <remarks>  Required only if delivery is canceled, i.e. status=Canceled.  </remarks>
    #[serde(
        rename = "cancelInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub cancel_info: Option<Option<Box<models::OrderCancelInfo>>>,
    /// Driver information.
    #[serde(
        rename = "courierInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub courier_info: Option<Option<Box<models::OrderCourierInfo>>>,
    /// Order fulfillment time (Local for the terminal).
    #[serde(rename = "completeBefore")]
    pub complete_before: String,
    /// Delivery creation time in iikoFront (Local for the terminal).
    #[serde(rename = "whenCreated")]
    pub when_created: String,
    /// Delivery confirmation time (Local for the terminal).
    #[serde(
        rename = "whenConfirmed",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_confirmed: Option<Option<String>>,
    /// Service printing time (Local for the terminal).
    #[serde(
        rename = "whenPrinted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_printed: Option<Option<String>>,
    /// Cooking completion time (Local for the terminal).
    #[serde(
        rename = "whenCookingCompleted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_cooking_completed: Option<Option<String>>,
    /// Delivery dispatch time (Local for the terminal).
    #[serde(
        rename = "whenSended",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_sended: Option<Option<String>>,
    /// Actual delivery time (Local for delivery terminal).
    #[serde(
        rename = "whenDelivered",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_delivered: Option<Option<String>>,
    /// Order comment.
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
    /// Problem flag.
    #[serde(
        rename = "problem",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub problem: Option<Option<Box<models::OrderProblem>>>,
    /// Operator that took order.
    #[serde(
        rename = "operator",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub operator: Option<Option<Box<models::OrderEmployee>>>,
    /// Marketing source.
    #[serde(
        rename = "marketingSource",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub marketing_source: Option<Option<Box<models::OrderMarketingSource>>>,
    /// Duration of delivery (in minutes).
    #[serde(
        rename = "deliveryDuration",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_duration: Option<Option<i64>>,
    /// Ordinal number in route list.  <remarks>  Field is filled up at the time of delivery allocation by logistics in iikoFront.  If logistics is not in use, the field is not filled up.  </remarks>
    #[serde(
        rename = "indexInCourierRoute",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub index_in_courier_route: Option<Option<i32>>,
    /// The time when you need to start cooking an order (Local for the terminal).
    #[serde(rename = "cookingStartTime")]
    pub cooking_start_time: String,
    /// Order is deleted.
    #[serde(
        rename = "isDeleted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted: Option<Option<bool>>,
    /// Moment of time when CloudAPI received the request to create the order (UTC).
    #[serde(
        rename = "whenReceivedByApi",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_received_by_api: Option<Option<String>>,
    /// Moment of time when the order first received and saved from iikoFront (UTC).
    #[serde(
        rename = "whenReceivedFromFront",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_received_from_front: Option<Option<String>>,
    /// Tells that this delivery has been moved from terminal group  with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.   > Allowed from version `7.5.4`.
    #[serde(
        rename = "movedFromDeliveryId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub moved_from_delivery_id: Option<Option<uuid::Uuid>>,
    /// Tells that this delivery has been moved from terminal group  with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.   > Allowed from version `7.5.4`.
    #[serde(
        rename = "movedFromTerminalGroupId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub moved_from_terminal_group_id: Option<Option<uuid::Uuid>>,
    /// Tells that this delivery has been moved from terminal group  with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.   > Allowed from version `7.5.4`.
    #[serde(
        rename = "movedFromOrganizationId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub moved_from_organization_id: Option<Option<uuid::Uuid>>,
    /// ECS info.   > Allowed from version `7.7.7`.
    #[serde(
        rename = "externalCourierService",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_courier_service: Option<Option<Box<models::OrderExternalCourierService>>>,
    /// Tells that this delivery has been canceled and moved to terminal group  with id *MovedToTerminalGroupId*.
    #[serde(
        rename = "movedToDeliveryId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub moved_to_delivery_id: Option<Option<uuid::Uuid>>,
    #[serde(
        rename = "movedToTerminalGroupId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub moved_to_terminal_group_id: Option<Option<uuid::Uuid>>,
    #[serde(
        rename = "movedToOrganizationId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub moved_to_organization_id: Option<Option<uuid::Uuid>>,
    /// External menu ID.
    #[serde(
        rename = "menuId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub menu_id: Option<Option<String>>,
    /// Name of delivery zone.
    #[serde(
        rename = "deliveryZone",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_zone: Option<Option<String>>,
    /// Delivery estimated time.
    #[serde(
        rename = "estimatedTime",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub estimated_time: Option<Option<String>>,
    /// Whether to deliver as soon as possible.
    #[serde(
        rename = "isAsap",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_asap: Option<Option<bool>>,
    /// Delivery packing time (Local for the terminal).
    #[serde(
        rename = "whenPacked",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_packed: Option<Option<String>>,
    /// Price category of the order.   > Allowed from version `9.0.5`.
    #[serde(
        rename = "priceCategory",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub price_category: Option<Option<Box<models::PriceCategory>>>,
    /// Order amount (after discount or surcharge).
    #[serde(rename = "sum")]
    pub sum: f64,
    /// Delivery No.
    #[serde(rename = "number")]
    pub number: i32,
    /// Delivery source.
    #[serde(
        rename = "sourceKey",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_key: Option<Option<String>>,
    /// Invoice printing time (guest bill time).
    #[serde(
        rename = "whenBillPrinted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_bill_printed: Option<Option<String>>,
    /// Delivery closing time (Local for delivery terminal).
    #[serde(
        rename = "whenClosed",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_closed: Option<Option<String>>,
    /// Concept.
    #[serde(
        rename = "conception",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub conception: Option<Option<Box<models::OrderConception>>>,
    /// Information about order guests.
    #[serde(rename = "guestsInfo", deserialize_with = "Option::deserialize")]
    pub guests_info: Option<Box<models::OrderGuestsInfo>>,
    /// Order items.
    #[serde(rename = "items")]
    pub items: Vec<models::OrderItem>,
    /// Combo.
    #[serde(
        rename = "combos",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub combos: Option<Option<Vec<models::OrderCombo>>>,
    ///
    #[serde(
        rename = "payments",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payments: Option<Option<Vec<models::OrderPaymentItem>>>,
    /// Tips.
    #[serde(
        rename = "tips",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tips: Option<Option<Vec<models::OrderTipsPaymentItem>>>,
    ///
    #[serde(
        rename = "discounts",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub discounts: Option<Option<Vec<models::OrderDiscountItem>>>,
    /// Order type.
    #[serde(rename = "orderType", deserialize_with = "Option::deserialize")]
    pub order_type: Option<Box<models::OrderType>>,
    /// ID of the terminal group where the order is located.
    #[serde(rename = "terminalGroupId")]
    pub terminal_group_id: uuid::Uuid,
    /// The amount of processed payments.  <remarks>  null - only for unsupported POS versions.  </remarks>   > Allowed from version `7.6.0`.
    #[serde(
        rename = "processedPaymentsSum",
        deserialize_with = "Option::deserialize"
    )]
    pub processed_payments_sum: Option<f64>,
    /// Information about Loyalty app.  <remarks>  null - only for unsupported POS versions.  </remarks>
    #[serde(
        rename = "loyaltyInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub loyalty_info: Option<Option<Box<models::OrderLoyaltyInfo>>>,
    /// Order external data.   > Allowed from version `8.0.6`.
    #[serde(
        rename = "externalData",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_data: Option<Option<Vec<models::OrderExternalData>>>,
}

impl Order {
    /// Order details.
    pub fn new(
        phone: String,
        status: models::DeliveryStatus,
        complete_before: String,
        when_created: String,
        cooking_start_time: String,
        sum: f64,
        number: i32,
        guests_info: Option<models::OrderGuestsInfo>,
        items: Vec<models::OrderItem>,
        order_type: Option<models::OrderType>,
        terminal_group_id: uuid::Uuid,
        processed_payments_sum: Option<f64>,
    ) -> Order {
        Order {
            parent_delivery_id: None,
            customer: None,
            phone,
            delivery_point: None,
            status,
            cancel_info: None,
            courier_info: None,
            complete_before,
            when_created,
            when_confirmed: None,
            when_printed: None,
            when_cooking_completed: None,
            when_sended: None,
            when_delivered: None,
            comment: None,
            problem: None,
            operator: None,
            marketing_source: None,
            delivery_duration: None,
            index_in_courier_route: None,
            cooking_start_time,
            is_deleted: None,
            when_received_by_api: None,
            when_received_from_front: None,
            moved_from_delivery_id: None,
            moved_from_terminal_group_id: None,
            moved_from_organization_id: None,
            external_courier_service: None,
            moved_to_delivery_id: None,
            moved_to_terminal_group_id: None,
            moved_to_organization_id: None,
            menu_id: None,
            delivery_zone: None,
            estimated_time: None,
            is_asap: None,
            when_packed: None,
            price_category: None,
            sum,
            number,
            source_key: None,
            when_bill_printed: None,
            when_closed: None,
            conception: None,
            guests_info: if let Some(x) = guests_info {
                Some(Box::new(x))
            } else {
                None
            },
            items,
            combos: None,
            payments: None,
            tips: None,
            discounts: None,
            order_type: if let Some(x) = order_type {
                Some(Box::new(x))
            } else {
                None
            },
            terminal_group_id,
            processed_payments_sum,
            loyalty_info: None,
            external_data: None,
        }
    }
}
