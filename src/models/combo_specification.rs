/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ComboSpecification : Information about combos of organization.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComboSpecification {
    /// Id of action that added the combo.
    #[serde(rename = "sourceActionId", skip_serializing_if = "Option::is_none")]
    pub source_action_id: Option<uuid::Uuid>,
    /// Combo's category id.
    #[serde(
        rename = "categoryId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub category_id: Option<Option<uuid::Uuid>>,
    /// Name. Can be null.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Price modification type.  <br>0 - fixed combo price,<br />1 - fixed position price,<br />2 - cheapest position discount,<br />3 - most expensive position discount,<br />4 - percentage discount for each position.
    #[serde(
        rename = "priceModificationType",
        skip_serializing_if = "Option::is_none"
    )]
    pub price_modification_type: Option<models::ComboPriceModificationType>,
    /// Price modification.
    #[serde(rename = "priceModification", skip_serializing_if = "Option::is_none")]
    pub price_modification: Option<f64>,
    /// Is active.
    #[serde(
        rename = "isActive",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_active: Option<Option<bool>>,
    /// Start date.
    #[serde(
        rename = "startDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub start_date: Option<Option<String>>,
    /// Expiration date.
    #[serde(
        rename = "expirationDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub expiration_date: Option<Option<String>>,
    /// Lacking groups to suggest.
    #[serde(
        rename = "lackingGroupsToSuggest",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub lacking_groups_to_suggest: Option<Option<i32>>,
    /// Include modifiers.
    #[serde(
        rename = "includeModifiers",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub include_modifiers: Option<Option<bool>>,
    /// Groups.
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<models::ComboGroup>>,
}

impl ComboSpecification {
    /// Information about combos of organization.
    pub fn new() -> ComboSpecification {
        ComboSpecification {
            source_action_id: None,
            category_id: None,
            name: None,
            price_modification_type: None,
            price_modification: None,
            is_active: None,
            start_date: None,
            expiration_date: None,
            lacking_groups_to_suggest: None,
            include_modifiers: None,
            groups: None,
        }
    }
}
