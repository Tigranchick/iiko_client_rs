/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestTableOrder {
    /// Order ID.
    #[serde(
        rename = "id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub id: Option<Option<uuid::Uuid>>,
    /// Order external number.   > Allowed from version `8.0.6`.
    #[serde(
        rename = "externalNumber",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_number: Option<Option<String>>,
    /// Table IDs.                Can be obtained by `/api/1/reserve/available_restaurant_sections` operation.
    #[serde(
        rename = "tableIds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub table_ids: Option<Option<Vec<uuid::Uuid>>>,
    /// Guest.   > Allowed from version `7.5.2`.
    #[serde(
        rename = "customer",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer: Option<Option<Box<models::RequestCreateOrderRegularCustomer>>>,
    /// Guest phone.   > Allowed from version `7.5.2`.
    #[serde(
        rename = "phone",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub phone: Option<Option<String>>,
    /// Amount of guests in the order.   > Allowed from version `7.6.1`.
    #[serde(
        rename = "guestCount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub guest_count: Option<Option<i32>>,
    /// Guests information.   > Allowed from version `7.6.1`.
    #[serde(
        rename = "guests",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub guests: Option<Option<Box<models::RequestGuestsInfo>>>,
    /// Tab name (only for fastfood terminals group in tab mode).   > Allowed from version `7.6.1`.
    #[serde(
        rename = "tabName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tab_name: Option<Option<String>>,
    /// External menu ID.
    #[serde(
        rename = "menuId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub menu_id: Option<Option<String>>,
    /// Price category id of the order.    Can be obtained by `/api/2/menu` operation.   > Allowed from version `9.0.5`.
    #[serde(
        rename = "priceCategoryId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub price_category_id: Option<Option<uuid::Uuid>>,
    /// Order items.
    #[serde(rename = "items")]
    pub items: Vec<models::RequestCreateOrderItem>,
    /// Combos included in order.
    #[serde(
        rename = "combos",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub combos: Option<Option<Vec<models::RequestCreateOrderCombo>>>,
    /// Order payment components.   > Type **LoyaltyCard** allowed from version `7.1.5`.
    #[serde(
        rename = "payments",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payments: Option<Option<Vec<models::RequestCreateOrderPayment>>>,
    /// Order tips components.
    #[serde(
        rename = "tips",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tips: Option<Option<Vec<models::RequestCreateOrderTipsPayment>>>,
    /// The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration.
    #[serde(
        rename = "sourceKey",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_key: Option<Option<String>>,
    /// Discounts/surcharges.
    #[serde(
        rename = "discountsInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub discounts_info: Option<Option<Box<models::RequestCreateOrderDiscountsInfo>>>,
    /// Information about Loyalty app.
    #[serde(
        rename = "loyaltyInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub loyalty_info: Option<Option<Box<models::RequestCreateOrderLoyaltyInfo>>>,
    /// Order type ID.                 Can be obtained by `/api/1/deliveries/order_types` operation
    #[serde(
        rename = "orderTypeId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_type_id: Option<Option<uuid::Uuid>>,
    /// Cheque additional information.
    #[serde(
        rename = "chequeAdditionalInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub cheque_additional_info: Option<Option<Box<models::ChequeAdditionalInfo>>>,
    /// Order external data.   > Allowed from version `8.0.6`.
    #[serde(
        rename = "externalData",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_data: Option<Option<Vec<models::RequestCreateOrderExternalData>>>,
}

impl RequestTableOrder {
    pub fn new(items: Vec<models::RequestCreateOrderItem>) -> RequestTableOrder {
        RequestTableOrder {
            id: None,
            external_number: None,
            table_ids: None,
            customer: None,
            phone: None,
            guest_count: None,
            guests: None,
            tab_name: None,
            menu_id: None,
            price_category_id: None,
            items,
            combos: None,
            payments: None,
            tips: None,
            source_key: None,
            discounts_info: None,
            loyalty_info: None,
            order_type_id: None,
            cheque_additional_info: None,
            external_data: None,
        }
    }
}
