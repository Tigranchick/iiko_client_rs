/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RmsFilterDraftsRequest : Request for the list of order drafts by several filters.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RmsFilterDraftsRequest {
    /// Organization ID for which the order drafts search will be performed.                Can be obtained by `/api/1/organizations` operation.
    #[serde(rename = "organizationIds")]
    pub organization_ids: Vec<uuid::Uuid>,
    /// Draft creation time (UTC). Lower limit.
    #[serde(
        rename = "dateFrom",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_from: Option<Option<String>>,
    /// Draft creation time (UTC). Upper limit.
    #[serde(
        rename = "dateTo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_to: Option<Option<String>>,
    /// Phone number.
    #[serde(
        rename = "phone",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub phone: Option<Option<String>>,
    /// Desirable size of result set (50 by default).
    #[serde(
        rename = "limit",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub limit: Option<Option<i32>>,
    /// Offset from the beginning of full result set for paging.
    #[serde(
        rename = "offset",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub offset: Option<Option<i32>>,
    /// Delivery sources (DeliveryClub, PH and etc.)
    #[serde(
        rename = "sourceKeys",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_keys: Option<Option<Vec<String>>>,
    /// List of terminal groups IDs.
    #[serde(
        rename = "terminalGroupIds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub terminal_group_ids: Option<Option<Vec<uuid::Uuid>>>,
    /// Value for search. Used for prefix search.
    #[serde(
        rename = "searchText",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub search_text: Option<Option<String>>,
    /// Sorting property.
    #[serde(
        rename = "sortProperty",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub sort_property: Option<Option<models::RmsOrderDraftSortProperty>>,
    /// Sorting direction.
    #[serde(
        rename = "sortDirection",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub sort_direction: Option<Option<models::SortDirection>>,
    /// List of drafts operator IDs.
    #[serde(
        rename = "operatorIds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub operator_ids: Option<Option<Vec<uuid::Uuid>>>,
    /// List of drafts order type IDs.
    #[serde(
        rename = "orderTypeIds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_type_ids: Option<Option<Vec<uuid::Uuid>>>,
}

impl RmsFilterDraftsRequest {
    /// Request for the list of order drafts by several filters.
    pub fn new(organization_ids: Vec<uuid::Uuid>) -> RmsFilterDraftsRequest {
        RmsFilterDraftsRequest {
            organization_ids,
            date_from: None,
            date_to: None,
            phone: None,
            limit: None,
            offset: None,
            source_keys: None,
            terminal_group_ids: None,
            search_text: None,
            sort_property: None,
            sort_direction: None,
            operator_ids: None,
            order_type_ids: None,
        }
    }
}
