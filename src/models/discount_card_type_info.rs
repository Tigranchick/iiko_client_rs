/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DiscountCardTypeInfo : Discount/surcharge DTO.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiscountCardTypeInfo {
    /// Discount ID in RMS.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Discount name.
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    /// Total discount rate.  > Ignored if \"isCategorisedDiscount\" specified.
    #[serde(rename = "percent")]
    pub percent: f64,
    /// Whether it is category discount or not.  > If true, \"productCategoryDiscounts\" discounts will apply.
    #[serde(rename = "isCategorisedDiscount")]
    pub is_categorised_discount: bool,
    /// Category discount.
    #[serde(rename = "productCategoryDiscounts")]
    pub product_category_discounts: Vec<models::ProductCategoryDiscount>,
    /// Comment.
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
    /// Whether discount allows for selected application to individual items at user's discretion.
    #[serde(rename = "canBeAppliedSelectively")]
    pub can_be_applied_selectively: bool,
    /// Minimum order amount required for discount application.  If order amount is less than specified threshold, discount does not apply.
    #[serde(
        rename = "minOrderSum",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub min_order_sum: Option<Option<f64>>,
    /// Discount type.     Can be obtained by `/api/1/discounts` operation.
    #[serde(rename = "mode")]
    pub mode: models::DiscountCardMode,
    /// Fixed amount.  > Triggers if fixed amount has been specified.
    #[serde(rename = "sum")]
    pub sum: f64,
    /// Can be applied by card No.  > If true, it's enough to enter discount card No. (card swiping not required)
    #[serde(rename = "canApplyByCardNumber")]
    pub can_apply_by_card_number: bool,
    /// Created manually.
    #[serde(rename = "isManual")]
    pub is_manual: bool,
    /// Executed by card.
    #[serde(rename = "isCard")]
    pub is_card: bool,
    /// Created automatically.
    #[serde(rename = "isAutomatic")]
    pub is_automatic: bool,
    /// IsDeleted.
    #[serde(rename = "isDeleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
}

impl DiscountCardTypeInfo {
    /// Discount/surcharge DTO.
    pub fn new(
        id: uuid::Uuid,
        name: Option<String>,
        percent: f64,
        is_categorised_discount: bool,
        product_category_discounts: Vec<models::ProductCategoryDiscount>,
        can_be_applied_selectively: bool,
        mode: models::DiscountCardMode,
        sum: f64,
        can_apply_by_card_number: bool,
        is_manual: bool,
        is_card: bool,
        is_automatic: bool,
    ) -> DiscountCardTypeInfo {
        DiscountCardTypeInfo {
            id,
            name,
            percent,
            is_categorised_discount,
            product_category_discounts,
            comment: None,
            can_be_applied_selectively,
            min_order_sum: None,
            mode,
            sum,
            can_apply_by_card_number,
            is_manual,
            is_card,
            is_automatic,
            is_deleted: None,
        }
    }
}
