/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReserveOrder : Order
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReserveOrder {
    /// External menu ID.
    #[serde(
        rename = "menuId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub menu_id: Option<Option<String>>,
    /// Order amount (after discount or surcharge).
    #[serde(rename = "sum")]
    pub sum: f64,
    /// Delivery No.
    #[serde(rename = "number")]
    pub number: i32,
    /// Delivery source.
    #[serde(
        rename = "sourceKey",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_key: Option<Option<String>>,
    /// Invoice printing time (guest bill time).
    #[serde(
        rename = "whenBillPrinted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_bill_printed: Option<Option<String>>,
    /// Delivery closing time (Local for delivery terminal).
    #[serde(
        rename = "whenClosed",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_closed: Option<Option<String>>,
    /// Concept.
    #[serde(
        rename = "conception",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub conception: Option<Option<Box<models::OrderConception>>>,
    /// Information about order guests.
    #[serde(rename = "guestsInfo", deserialize_with = "Option::deserialize")]
    pub guests_info: Option<Box<models::OrderGuestsInfo>>,
    /// Order items.
    #[serde(rename = "items")]
    pub items: Vec<models::OrderItem>,
    /// Combo.
    #[serde(
        rename = "combos",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub combos: Option<Option<Vec<models::OrderCombo>>>,
    ///
    #[serde(
        rename = "payments",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payments: Option<Option<Vec<models::OrderPaymentItem>>>,
    /// Tips.
    #[serde(
        rename = "tips",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tips: Option<Option<Vec<models::OrderTipsPaymentItem>>>,
    ///
    #[serde(
        rename = "discounts",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub discounts: Option<Option<Vec<models::OrderDiscountItem>>>,
    /// Order type.
    #[serde(rename = "orderType", deserialize_with = "Option::deserialize")]
    pub order_type: Option<Box<models::OrderType>>,
    /// ID of the terminal group where the order is located.
    #[serde(rename = "terminalGroupId")]
    pub terminal_group_id: uuid::Uuid,
    /// The amount of processed payments.  <remarks>  null - only for unsupported POS versions.  </remarks>   > Allowed from version `7.6.0`.
    #[serde(
        rename = "processedPaymentsSum",
        deserialize_with = "Option::deserialize"
    )]
    pub processed_payments_sum: Option<f64>,
    /// Information about Loyalty app.  <remarks>  null - only for unsupported POS versions.  </remarks>
    #[serde(
        rename = "loyaltyInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub loyalty_info: Option<Option<Box<models::OrderLoyaltyInfo>>>,
    /// Order external data.   > Allowed from version `8.0.6`.
    #[serde(
        rename = "externalData",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_data: Option<Option<Vec<models::OrderExternalData>>>,
}

impl ReserveOrder {
    /// Order
    pub fn new(
        sum: f64,
        number: i32,
        guests_info: Option<models::OrderGuestsInfo>,
        items: Vec<models::OrderItem>,
        order_type: Option<models::OrderType>,
        terminal_group_id: uuid::Uuid,
        processed_payments_sum: Option<f64>,
    ) -> ReserveOrder {
        ReserveOrder {
            menu_id: None,
            sum,
            number,
            source_key: None,
            when_bill_printed: None,
            when_closed: None,
            conception: None,
            guests_info: if let Some(x) = guests_info {
                Some(Box::new(x))
            } else {
                None
            },
            items,
            combos: None,
            payments: None,
            tips: None,
            discounts: None,
            order_type: if let Some(x) = order_type {
                Some(Box::new(x))
            } else {
                None
            },
            terminal_group_id,
            processed_payments_sum,
            loyalty_info: None,
            external_data: None,
        }
    }
}
