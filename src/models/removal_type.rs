/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RemovalType : Removal type (aka reason for deletion).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemovalType {
    /// Identifier.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Name of removal type.
    #[serde(rename = "name")]
    pub name: String,
    /// Comment.
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
    /// Can write off to cafe.
    #[serde(rename = "canWriteoffToCafe", skip_serializing_if = "Option::is_none")]
    pub can_writeoff_to_cafe: Option<bool>,
    /// Can write off to waiter.
    #[serde(
        rename = "canWriteoffToWaiter",
        skip_serializing_if = "Option::is_none"
    )]
    pub can_writeoff_to_waiter: Option<bool>,
    /// Can write off to user.
    #[serde(rename = "canWriteoffToUser", skip_serializing_if = "Option::is_none")]
    pub can_writeoff_to_user: Option<bool>,
    /// Require comments on operations.
    #[serde(rename = "reasonRequired", skip_serializing_if = "Option::is_none")]
    pub reason_required: Option<bool>,
    /// Can be used manually.
    #[serde(rename = "manual", skip_serializing_if = "Option::is_none")]
    pub manual: Option<bool>,
    /// Is deleted sign.
    #[serde(rename = "isDeleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
}

impl RemovalType {
    /// Removal type (aka reason for deletion).
    pub fn new(id: uuid::Uuid, name: String) -> RemovalType {
        RemovalType {
            id,
            name,
            comment: None,
            can_writeoff_to_cafe: None,
            can_writeoff_to_waiter: None,
            can_writeoff_to_user: None,
            reason_required: None,
            manual: None,
            is_deleted: None,
        }
    }
}
