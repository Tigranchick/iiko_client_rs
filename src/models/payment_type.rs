/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PaymentType : DTO for payment type in iikoRMS
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentType {
    /// Payment type ID
    #[serde(
        rename = "id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub id: Option<Option<uuid::Uuid>>,
    /// Payment type code
    #[serde(
        rename = "code",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<Option<String>>,
    /// Payment type name
    #[serde(
        rename = "name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<Option<String>>,
    /// Payment type comment
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
    /// Combinability attribute
    #[serde(rename = "combinable", skip_serializing_if = "Option::is_none")]
    pub combinable: Option<bool>,
    /// External system revision number.
    #[serde(
        rename = "externalRevision",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_revision: Option<Option<i64>>,
    /// Array of marketing campaigns associated with LoyaltyApp payment type applicable to this organization.
    #[serde(rename = "applicableMarketingCampaigns")]
    pub applicable_marketing_campaigns: Vec<uuid::Uuid>,
    /// IsDeleted attribute of payment type.
    #[serde(rename = "isDeleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    /// If true, payment type is fiscal and bill will be printed.
    #[serde(rename = "printCheque", skip_serializing_if = "Option::is_none")]
    pub print_cheque: Option<bool>,
    /// Describes operation processing type.
    #[serde(
        rename = "paymentProcessingType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payment_processing_type: Option<Option<models::PaymentProcessingType>>,
    /// Payment type category.
    #[serde(
        rename = "paymentTypeKind",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payment_type_kind: Option<Option<models::PaymentTypeKind>>,
    /// Terminal groups where this payment type is available.
    #[serde(rename = "terminalGroups")]
    pub terminal_groups: Vec<models::TerminalGroup>,
}

impl PaymentType {
    /// DTO for payment type in iikoRMS
    pub fn new(
        applicable_marketing_campaigns: Vec<uuid::Uuid>,
        terminal_groups: Vec<models::TerminalGroup>,
    ) -> PaymentType {
        PaymentType {
            id: None,
            code: None,
            name: None,
            comment: None,
            combinable: None,
            external_revision: None,
            applicable_marketing_campaigns,
            is_deleted: None,
            print_cheque: None,
            payment_processing_type: None,
            payment_type_kind: None,
            terminal_groups,
        }
    }
}
