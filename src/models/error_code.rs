/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ErrorCode {
    #[serde(rename = "Common")]
    Common,
    #[serde(rename = "IllegalDeliveryStatus")]
    IllegalDeliveryStatus,
    #[serde(rename = "CustomerNameNotSpecified")]
    CustomerNameNotSpecified,
    #[serde(rename = "ProductNotFound")]
    ProductNotFound,
    #[serde(rename = "MarketingSourceNotFound")]
    MarketingSourceNotFound,
    #[serde(rename = "PaymentTypeNotFound")]
    PaymentTypeNotFound,
    #[serde(rename = "ProductSizeNotFound")]
    ProductSizeNotFound,
    #[serde(rename = "ProductGroupNotFound")]
    ProductGroupNotFound,
    #[serde(rename = "OrderNotFound")]
    OrderNotFound,
    #[serde(rename = "ConceptionNotFound")]
    ConceptionNotFound,
    #[serde(rename = "DuplicatedOrderId")]
    DuplicatedOrderId,
    #[serde(rename = "TerminalGroupIdNotDetermined")]
    TerminalGroupIdNotDetermined,
    #[serde(rename = "TerminalGroupUnregistered")]
    TerminalGroupUnregistered,
    #[serde(rename = "InvalidPhone")]
    InvalidPhone,
    #[serde(rename = "ModifierDuplicated")]
    ModifierDuplicated,
    #[serde(rename = "ProductCanBuyFromCashdesk")]
    ProductCanBuyFromCashdesk,
    #[serde(rename = "DeliveryOpinionMarkInvalid")]
    DeliveryOpinionMarkInvalid,
    #[serde(rename = "WrongDeliveryStatusForOpinion")]
    WrongDeliveryStatusForOpinion,
    #[serde(rename = "OpinionCommentTooLong")]
    OpinionCommentTooLong,
    #[serde(rename = "SurveyItemNotFound")]
    SurveyItemNotFound,
    #[serde(rename = "PaymentTypeCanNotBeUsedAsExternal")]
    PaymentTypeCanNotBeUsedAsExternal,
    #[serde(rename = "AddressNotFound")]
    AddressNotFound,
    #[serde(rename = "HomeNotFound")]
    HomeNotFound,
    #[serde(rename = "IikonetPaymentAdditionalDataCanNotBeParsed")]
    IikonetPaymentAdditionalDataCanNotBeParsed,
    #[serde(rename = "IikonetPaymentExternalIdNotFound")]
    IikonetPaymentExternalIdNotFound,
    #[serde(rename = "IikonetPaymentSumLessThanMarketingDiscount")]
    IikonetPaymentSumLessThanMarketingDiscount,
    #[serde(rename = "DiscountCardNotFound")]
    DiscountCardNotFound,
    #[serde(rename = "DiscountCardTypeModeForbidden")]
    DiscountCardTypeModeForbidden,
    #[serde(rename = "Iikocard5PaymentAdditionalDataCanNotBeParsed")]
    Iikocard5PaymentAdditionalDataCanNotBeParsed,
    #[serde(rename = "Iikocard5PaymentExternalIdNotFound")]
    Iikocard5PaymentExternalIdNotFound,
    #[serde(rename = "Iikocard5PaymentSumLessThanMarketingDiscount")]
    Iikocard5PaymentSumLessThanMarketingDiscount,
    #[serde(rename = "Iikocard5PaymentCanNotCreateCustomData")]
    Iikocard5PaymentCanNotCreateCustomData,
    #[serde(rename = "CourierIdDoesNotExist")]
    CourierIdDoesNotExist,
    #[serde(rename = "CourierDoesNotOwnOrder")]
    CourierDoesNotOwnOrder,
    #[serde(rename = "WrongDeliveryStatus")]
    WrongDeliveryStatus,
    #[serde(rename = "CanNotAssignCourierToOrder")]
    CanNotAssignCourierToOrder,
    #[serde(rename = "UserNotFoundByExternalPassword")]
    UserNotFoundByExternalPassword,
    #[serde(rename = "UserNotFound")]
    UserNotFound,
    #[serde(rename = "Iikocard51PaymentAdditionalDataCanNotBeParsed")]
    Iikocard51PaymentAdditionalDataCanNotBeParsed,
    #[serde(rename = "Iikocard51PaymentCredentialNotFound")]
    Iikocard51PaymentCredentialNotFound,
    #[serde(rename = "Iikocard51PaymentSearchScopeNotFound")]
    Iikocard51PaymentSearchScopeNotFound,
    #[serde(rename = "ComboDuplicated")]
    ComboDuplicated,
    #[serde(rename = "InvalidReferenceToCombo")]
    InvalidReferenceToCombo,
    #[serde(rename = "InvalidComboItemsAmount")]
    InvalidComboItemsAmount,
    #[serde(rename = "InvalidComboItemsGuest")]
    InvalidComboItemsGuest,
    #[serde(rename = "InvalidReferenceToGuest")]
    InvalidReferenceToGuest,
    #[serde(rename = "GuestDuplicated")]
    GuestDuplicated,
    #[serde(rename = "GuestNameNotSpecified")]
    GuestNameNotSpecified,
    #[serde(rename = "OrderTypeNotFound")]
    OrderTypeNotFound,
    #[serde(rename = "OrderServiceTypeDoesNotMatchSelfServiceMode")]
    OrderServiceTypeDoesNotMatchSelfServiceMode,
    #[serde(rename = "DeliveryDateNotSpecified")]
    DeliveryDateNotSpecified,
    #[serde(rename = "OrderStatusChangedInIikoFront")]
    OrderStatusChangedInIikoFront,
    #[serde(rename = "PaymentAdditionalDataTooLong")]
    PaymentAdditionalDataTooLong,
    #[serde(rename = "PaymentSumShouldBePositive")]
    PaymentSumShouldBePositive,
    #[serde(rename = "DiscountSumNotSpecified")]
    DiscountSumNotSpecified,
    #[serde(rename = "InvalidDiscountItem")]
    InvalidDiscountItem,
    #[serde(rename = "RequestProductPriceIsNotEqualToFrontPrice")]
    RequestProductPriceIsNotEqualToFrontPrice,
    #[serde(rename = "OrderItemsNotExists")]
    OrderItemsNotExists,
    #[serde(rename = "EntityAlreadyInUse")]
    EntityAlreadyInUse,
    #[serde(rename = "DiscountItemPositionNotFound")]
    DiscountItemPositionNotFound,
    #[serde(rename = "DiscountItemDuplicatePositions")]
    DiscountItemDuplicatePositions,
    #[serde(rename = "NonUnqiueOrderItemPosition")]
    NonUnqiueOrderItemPosition,
    #[serde(rename = "EmptyOrderItemPosition")]
    EmptyOrderItemPosition,
    #[serde(rename = "IncorrectOrderType")]
    IncorrectOrderType,
    #[serde(rename = "Incorrect")]
    Incorrect,
    #[serde(rename = "TerminalGroupDisabled")]
    TerminalGroupDisabled,
    #[serde(rename = "OrganizationUnregistered")]
    OrganizationUnregistered,
    #[serde(rename = "OrganizationDisabled")]
    OrganizationDisabled,
    #[serde(rename = "TooSmallDeliveryDate")]
    TooSmallDeliveryDate,
    #[serde(rename = "IikoFrontTooOldVersion")]
    IikoFrontTooOldVersion,
    #[serde(rename = "DuplicatedReserveId")]
    DuplicatedReserveId,
    #[serde(rename = "TipsTypeNotApplicable")]
    TipsTypeNotApplicable,
    #[serde(rename = "AnonymousCustomerDisabled")]
    AnonymousCustomerDisabled,
    #[serde(rename = "MayBeInconsistentUpdates")]
    MayBeInconsistentUpdates,
    #[serde(rename = "InconsistentUpdates")]
    InconsistentUpdates,
    #[serde(rename = "Line1Disabled")]
    Line1Disabled,
    #[serde(rename = "InternalServerError")]
    InternalServerError,
    #[serde(rename = "UnknownError")]
    UnknownError,
}

impl std::fmt::Display for ErrorCode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Common => write!(f, "Common"),
            Self::IllegalDeliveryStatus => write!(f, "IllegalDeliveryStatus"),
            Self::CustomerNameNotSpecified => write!(f, "CustomerNameNotSpecified"),
            Self::ProductNotFound => write!(f, "ProductNotFound"),
            Self::MarketingSourceNotFound => write!(f, "MarketingSourceNotFound"),
            Self::PaymentTypeNotFound => write!(f, "PaymentTypeNotFound"),
            Self::ProductSizeNotFound => write!(f, "ProductSizeNotFound"),
            Self::ProductGroupNotFound => write!(f, "ProductGroupNotFound"),
            Self::OrderNotFound => write!(f, "OrderNotFound"),
            Self::ConceptionNotFound => write!(f, "ConceptionNotFound"),
            Self::DuplicatedOrderId => write!(f, "DuplicatedOrderId"),
            Self::TerminalGroupIdNotDetermined => write!(f, "TerminalGroupIdNotDetermined"),
            Self::TerminalGroupUnregistered => write!(f, "TerminalGroupUnregistered"),
            Self::InvalidPhone => write!(f, "InvalidPhone"),
            Self::ModifierDuplicated => write!(f, "ModifierDuplicated"),
            Self::ProductCanBuyFromCashdesk => write!(f, "ProductCanBuyFromCashdesk"),
            Self::DeliveryOpinionMarkInvalid => write!(f, "DeliveryOpinionMarkInvalid"),
            Self::WrongDeliveryStatusForOpinion => write!(f, "WrongDeliveryStatusForOpinion"),
            Self::OpinionCommentTooLong => write!(f, "OpinionCommentTooLong"),
            Self::SurveyItemNotFound => write!(f, "SurveyItemNotFound"),
            Self::PaymentTypeCanNotBeUsedAsExternal => {
                write!(f, "PaymentTypeCanNotBeUsedAsExternal")
            }
            Self::AddressNotFound => write!(f, "AddressNotFound"),
            Self::HomeNotFound => write!(f, "HomeNotFound"),
            Self::IikonetPaymentAdditionalDataCanNotBeParsed => {
                write!(f, "IikonetPaymentAdditionalDataCanNotBeParsed")
            }
            Self::IikonetPaymentExternalIdNotFound => write!(f, "IikonetPaymentExternalIdNotFound"),
            Self::IikonetPaymentSumLessThanMarketingDiscount => {
                write!(f, "IikonetPaymentSumLessThanMarketingDiscount")
            }
            Self::DiscountCardNotFound => write!(f, "DiscountCardNotFound"),
            Self::DiscountCardTypeModeForbidden => write!(f, "DiscountCardTypeModeForbidden"),
            Self::Iikocard5PaymentAdditionalDataCanNotBeParsed => {
                write!(f, "Iikocard5PaymentAdditionalDataCanNotBeParsed")
            }
            Self::Iikocard5PaymentExternalIdNotFound => {
                write!(f, "Iikocard5PaymentExternalIdNotFound")
            }
            Self::Iikocard5PaymentSumLessThanMarketingDiscount => {
                write!(f, "Iikocard5PaymentSumLessThanMarketingDiscount")
            }
            Self::Iikocard5PaymentCanNotCreateCustomData => {
                write!(f, "Iikocard5PaymentCanNotCreateCustomData")
            }
            Self::CourierIdDoesNotExist => write!(f, "CourierIdDoesNotExist"),
            Self::CourierDoesNotOwnOrder => write!(f, "CourierDoesNotOwnOrder"),
            Self::WrongDeliveryStatus => write!(f, "WrongDeliveryStatus"),
            Self::CanNotAssignCourierToOrder => write!(f, "CanNotAssignCourierToOrder"),
            Self::UserNotFoundByExternalPassword => write!(f, "UserNotFoundByExternalPassword"),
            Self::UserNotFound => write!(f, "UserNotFound"),
            Self::Iikocard51PaymentAdditionalDataCanNotBeParsed => {
                write!(f, "Iikocard51PaymentAdditionalDataCanNotBeParsed")
            }
            Self::Iikocard51PaymentCredentialNotFound => {
                write!(f, "Iikocard51PaymentCredentialNotFound")
            }
            Self::Iikocard51PaymentSearchScopeNotFound => {
                write!(f, "Iikocard51PaymentSearchScopeNotFound")
            }
            Self::ComboDuplicated => write!(f, "ComboDuplicated"),
            Self::InvalidReferenceToCombo => write!(f, "InvalidReferenceToCombo"),
            Self::InvalidComboItemsAmount => write!(f, "InvalidComboItemsAmount"),
            Self::InvalidComboItemsGuest => write!(f, "InvalidComboItemsGuest"),
            Self::InvalidReferenceToGuest => write!(f, "InvalidReferenceToGuest"),
            Self::GuestDuplicated => write!(f, "GuestDuplicated"),
            Self::GuestNameNotSpecified => write!(f, "GuestNameNotSpecified"),
            Self::OrderTypeNotFound => write!(f, "OrderTypeNotFound"),
            Self::OrderServiceTypeDoesNotMatchSelfServiceMode => {
                write!(f, "OrderServiceTypeDoesNotMatchSelfServiceMode")
            }
            Self::DeliveryDateNotSpecified => write!(f, "DeliveryDateNotSpecified"),
            Self::OrderStatusChangedInIikoFront => write!(f, "OrderStatusChangedInIikoFront"),
            Self::PaymentAdditionalDataTooLong => write!(f, "PaymentAdditionalDataTooLong"),
            Self::PaymentSumShouldBePositive => write!(f, "PaymentSumShouldBePositive"),
            Self::DiscountSumNotSpecified => write!(f, "DiscountSumNotSpecified"),
            Self::InvalidDiscountItem => write!(f, "InvalidDiscountItem"),
            Self::RequestProductPriceIsNotEqualToFrontPrice => {
                write!(f, "RequestProductPriceIsNotEqualToFrontPrice")
            }
            Self::OrderItemsNotExists => write!(f, "OrderItemsNotExists"),
            Self::EntityAlreadyInUse => write!(f, "EntityAlreadyInUse"),
            Self::DiscountItemPositionNotFound => write!(f, "DiscountItemPositionNotFound"),
            Self::DiscountItemDuplicatePositions => write!(f, "DiscountItemDuplicatePositions"),
            Self::NonUnqiueOrderItemPosition => write!(f, "NonUnqiueOrderItemPosition"),
            Self::EmptyOrderItemPosition => write!(f, "EmptyOrderItemPosition"),
            Self::IncorrectOrderType => write!(f, "IncorrectOrderType"),
            Self::Incorrect => write!(f, "Incorrect"),
            Self::TerminalGroupDisabled => write!(f, "TerminalGroupDisabled"),
            Self::OrganizationUnregistered => write!(f, "OrganizationUnregistered"),
            Self::OrganizationDisabled => write!(f, "OrganizationDisabled"),
            Self::TooSmallDeliveryDate => write!(f, "TooSmallDeliveryDate"),
            Self::IikoFrontTooOldVersion => write!(f, "IikoFrontTooOldVersion"),
            Self::DuplicatedReserveId => write!(f, "DuplicatedReserveId"),
            Self::TipsTypeNotApplicable => write!(f, "TipsTypeNotApplicable"),
            Self::AnonymousCustomerDisabled => write!(f, "AnonymousCustomerDisabled"),
            Self::MayBeInconsistentUpdates => write!(f, "MayBeInconsistentUpdates"),
            Self::InconsistentUpdates => write!(f, "InconsistentUpdates"),
            Self::Line1Disabled => write!(f, "Line1Disabled"),
            Self::InternalServerError => write!(f, "InternalServerError"),
            Self::UnknownError => write!(f, "UnknownError"),
        }
    }
}

impl Default for ErrorCode {
    fn default() -> ErrorCode {
        Self::Common
    }
}
