/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebHooksFilter : Webhooks filter.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebHooksFilter {
    /// Filter for delivery orders.
    #[serde(
        rename = "deliveryOrderFilter",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_order_filter: Option<Option<Box<models::DeliveryOrderWebHooksFilter>>>,
    /// Filter for table orders.
    #[serde(
        rename = "tableOrderFilter",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub table_order_filter: Option<Option<Box<models::TableOrderWebHookFilter>>>,
    /// Filter for banquets/reserves.
    #[serde(
        rename = "reserveFilter",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub reserve_filter: Option<Option<Box<models::ReserveWebHookFilter>>>,
    /// Filter for stop-lists changes.
    #[serde(
        rename = "stopListUpdateFilter",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub stop_list_update_filter: Option<Option<Box<models::WebHookShortFilter>>>,
    /// Filter for personal shift.
    #[serde(
        rename = "personalShiftFilter",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub personal_shift_filter: Option<Option<Box<models::WebHookShortFilter>>>,
    /// Filter for nomenclature changes.
    #[serde(
        rename = "nomenclatureUpdateFilter",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub nomenclature_update_filter: Option<Option<Box<models::WebHookShortFilter>>>,
}

impl WebHooksFilter {
    /// Webhooks filter.
    pub fn new() -> WebHooksFilter {
        WebHooksFilter {
            delivery_order_filter: None,
            table_order_filter: None,
            reserve_filter: None,
            stop_list_update_filter: None,
            personal_shift_filter: None,
            nomenclature_update_filter: None,
        }
    }
}
