/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RequestCreateOrder : Order
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestCreateOrder {
    /// Order ID. Must be unique.  > If sent null, it generates automatically on iikoTransport side.
    #[serde(
        rename = "id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub id: Option<Option<uuid::Uuid>>,
    /// Order external number.   > Allowed from version `8.0.6`.
    #[serde(
        rename = "externalNumber",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_number: Option<Option<String>>,
    /// Order fulfillment date.  > Date and time must be local for delivery terminal, without time zone (take a look at example).   > If null, order is urgent and time is calculated based on customer settings,  > i.e. the shortest delivery time possible.  > Permissible values: from current day and 60 days on.
    #[serde(
        rename = "completeBefore",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub complete_before: Option<Option<String>>,
    /// Telephone number.  > Must begin with symbol \"+\" and must be at least 8 digits.
    #[serde(rename = "phone")]
    pub phone: String,
    /// Order type ID.     Can be obtained by `/api/1/deliveries/order_types` operation.    > Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.
    #[serde(
        rename = "orderTypeId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_type_id: Option<Option<uuid::Uuid>>,
    /// Order service type.  > Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.   > Allowed from version `7.0.3`.
    #[serde(
        rename = "orderServiceType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_service_type: Option<Option<models::RequestCreateOrderServiceType>>,
    /// Delivery point details.  > Not required in case of customer pickup. Otherwise, required.
    #[serde(
        rename = "deliveryPoint",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_point: Option<Option<Box<models::RequestCreateOrderDeliveryPoint>>>,
    /// Order comment.
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
    /// Customer.                'Regular' customer:    - can be used only if a customer agrees to take part in the store's loyalty programs  - customer details will be added (updated) to the store's customer database  - benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer     'One-time' customer:    - should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details  - customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order
    #[serde(
        rename = "customer",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer: Option<Option<Box<models::RequestCreateOrderCustomer>>>,
    /// Guest details. Not equal to the customer who makes an order.
    #[serde(
        rename = "guests",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub guests: Option<Option<Box<models::RequestCreateOrderGuests>>>,
    /// Marketing source (advertisement) ID.                 Can be obtained by `/api/1/marketing_sources` operation.
    #[serde(
        rename = "marketingSourceId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub marketing_source_id: Option<Option<uuid::Uuid>>,
    /// Operator ID.   > Allowed from version `7.6.3`.
    #[serde(
        rename = "operatorId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub operator_id: Option<Option<uuid::Uuid>>,
    /// Delivery duration.   > Allowed from version `8.8.6`.
    #[serde(
        rename = "deliveryDuration",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_duration: Option<Option<i32>>,
    /// Name of delivery zone.   > Allowed from version `8.8.6`.
    #[serde(
        rename = "deliveryZone",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_zone: Option<Option<String>>,
    /// Order items.
    #[serde(rename = "items")]
    pub items: Vec<models::RequestCreateOrderItem>,
    /// Combos included in order.
    #[serde(
        rename = "combos",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub combos: Option<Option<Vec<models::RequestCreateOrderCombo>>>,
    /// Order payment components.   > Type **LoyaltyCard** allowed from version `7.1.5`.
    #[serde(
        rename = "payments",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payments: Option<Option<Vec<models::RequestCreateOrderPayment>>>,
    /// Order tips components.
    #[serde(
        rename = "tips",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tips: Option<Option<Vec<models::RequestCreateOrderTipsPayment>>>,
    /// The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration.
    #[serde(
        rename = "sourceKey",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_key: Option<Option<String>>,
    /// Discounts/surcharges.
    #[serde(
        rename = "discountsInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub discounts_info: Option<Option<Box<models::RequestCreateOrderDiscountsInfo>>>,
    /// Information about Loyalty app.
    #[serde(
        rename = "loyaltyInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub loyalty_info: Option<Option<Box<models::RequestCreateOrderLoyaltyInfo>>>,
    /// Cheque additional information.
    #[serde(
        rename = "chequeAdditionalInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub cheque_additional_info: Option<Option<Box<models::ChequeAdditionalInfo>>>,
    /// Order external data.   > Allowed from version `8.0.6`.
    #[serde(
        rename = "externalData",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_data: Option<Option<Vec<models::RequestCreateOrderExternalData>>>,
}

impl RequestCreateOrder {
    /// Order
    pub fn new(phone: String, items: Vec<models::RequestCreateOrderItem>) -> RequestCreateOrder {
        RequestCreateOrder {
            id: None,
            external_number: None,
            complete_before: None,
            phone,
            order_type_id: None,
            order_service_type: None,
            delivery_point: None,
            comment: None,
            customer: None,
            guests: None,
            marketing_source_id: None,
            operator_id: None,
            delivery_duration: None,
            delivery_zone: None,
            items,
            combos: None,
            payments: None,
            tips: None,
            source_key: None,
            discounts_info: None,
            loyalty_info: None,
            cheque_additional_info: None,
            external_data: None,
        }
    }
}
