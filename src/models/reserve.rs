/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Reserve : Banquet/reserve.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Reserve {
    /// Client that placed the reserve.
    #[serde(rename = "customer")]
    pub customer: Box<models::OrderCustomer>,
    /// Estimated guests count.
    #[serde(rename = "guestsCount")]
    pub guests_count: i32,
    /// Optional comment for reserve or banquet.
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
    /// Estimated banquet duration.
    #[serde(rename = "durationInMinutes")]
    pub duration_in_minutes: i64,
    /// Whether to remind staff to prepare table beforehand.
    #[serde(rename = "shouldRemind")]
    pub should_remind: bool,
    /// Status of the reserve or banquet.
    #[serde(rename = "status")]
    pub status: models::ReserveStatus,
    /// The reserve cancellation reason or null if the reserve hasn't been canceled.
    #[serde(
        rename = "cancelReason",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub cancel_reason: Option<Option<models::ReserveCancelReason>>,
    /// Reserved table IDs.
    #[serde(rename = "tableIds")]
    pub table_ids: Vec<uuid::Uuid>,
    /// Estimated time when reserve will be closed or banquet will be started.
    #[serde(rename = "estimatedStartTime")]
    pub estimated_start_time: String,
    /// Time when guests came and reserve was closed or banquet was started.
    #[serde(
        rename = "guestsComingTime",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub guests_coming_time: Option<Option<String>>,
    /// Telephone number.
    #[serde(
        rename = "phone",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub phone: Option<Option<String>>,
    /// Event type.   > Allowed from version `8.5.6`.
    #[serde(
        rename = "eventType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_type: Option<Option<String>>,
    /// Order Used only at a banquet.
    #[serde(
        rename = "order",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order: Option<Option<Box<models::ReserveOrder>>>,
}

impl Reserve {
    /// Banquet/reserve.
    pub fn new(
        customer: models::OrderCustomer,
        guests_count: i32,
        duration_in_minutes: i64,
        should_remind: bool,
        status: models::ReserveStatus,
        table_ids: Vec<uuid::Uuid>,
        estimated_start_time: String,
    ) -> Reserve {
        Reserve {
            customer: Box::new(customer),
            guests_count,
            comment: None,
            duration_in_minutes,
            should_remind,
            status,
            cancel_reason: None,
            table_ids,
            estimated_start_time,
            guests_coming_time: None,
            phone: None,
            event_type: None,
            order: None,
        }
    }
}
