/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RequestCreateOrderCompoundOrderItem : Order item: composite item.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestCreateOrderCompoundOrderItem {
    /// Main component.
    #[serde(rename = "primaryComponent")]
    pub primary_component: Box<models::RequestCreateOrderCompoundOrderItemComponent>,
    /// Minor component.
    #[serde(
        rename = "secondaryComponent",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub secondary_component:
        Option<Option<Box<models::RequestCreateOrderCompoundOrderItemComponent>>>,
    /// Indivisible modifiers.
    #[serde(
        rename = "commonModifiers",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub common_modifiers: Option<Option<Vec<models::RequestCreateOrderModifier>>>,
    #[serde(rename = "type")]
    pub r#type: String,
    /// Quantity.
    #[serde(rename = "amount")]
    pub amount: f64,
    /// Size ID. Required if a stock list item has a size scale.
    #[serde(
        rename = "productSizeId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub product_size_id: Option<Option<uuid::Uuid>>,
    /// Combo details if combo includes order item.
    #[serde(
        rename = "comboInformation",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub combo_information: Option<Option<Box<models::RequestCreateOrderComboItemInformation>>>,
    /// Comment.
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
}

impl RequestCreateOrderCompoundOrderItem {
    /// Order item: composite item.
    pub fn new(
        primary_component: models::RequestCreateOrderCompoundOrderItemComponent,
        r#type: String,
        amount: f64,
    ) -> RequestCreateOrderCompoundOrderItem {
        RequestCreateOrderCompoundOrderItem {
            primary_component: Box::new(primary_component),
            secondary_component: None,
            common_modifiers: None,
            r#type,
            amount,
            product_size_id: None,
            combo_information: None,
            comment: None,
        }
    }
}
