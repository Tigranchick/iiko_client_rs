/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderCompoundOrderItemComponent : Part of composite item.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderCompoundOrderItemComponent {
    /// Item.
    #[serde(rename = "product")]
    pub product: Box<models::OrderProduct>,
    /// Modifiers.
    #[serde(
        rename = "modifiers",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub modifiers: Option<Option<Vec<models::OrderItemModifier>>>,
    /// Price per item unit. Can be sent different from the price in the base menu.
    #[serde(rename = "price")]
    pub price: f64,
    /// Item total including tax, discounts/surcharges.
    #[serde(rename = "cost")]
    pub cost: f64,
    /// Whether price is predefined.
    #[serde(rename = "pricePredefined")]
    pub price_predefined: bool,
    /// Unique identifier of the item in the order and for the whole system.
    #[serde(
        rename = "positionId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub position_id: Option<Option<uuid::Uuid>>,
    /// Tax rate.
    #[serde(
        rename = "taxPercent",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tax_percent: Option<Option<f64>>,
    /// Total amount per item including tax, discounts/surcharges.
    #[serde(rename = "resultSum", skip_serializing_if = "Option::is_none")]
    pub result_sum: Option<f64>,
}

impl OrderCompoundOrderItemComponent {
    /// Part of composite item.
    pub fn new(
        product: models::OrderProduct,
        price: f64,
        cost: f64,
        price_predefined: bool,
    ) -> OrderCompoundOrderItemComponent {
        OrderCompoundOrderItemComponent {
            product: Box::new(product),
            modifiers: None,
            price,
            cost,
            price_predefined,
            position_id: None,
            tax_percent: None,
            result_sum: None,
        }
    }
}
