/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateOrUpdateCustomerRequest : Not empty `phone` or `magnetCardTrack` or `id` is required for successful import.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateOrUpdateCustomerRequest {
    /// Customer id.
    #[serde(
        rename = "id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub id: Option<Option<uuid::Uuid>>,
    /// Customer phone. Can be null.
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    /// Card track. Required if cardNumber set. Can be null.
    #[serde(rename = "cardTrack", skip_serializing_if = "Option::is_none")]
    pub card_track: Option<String>,
    /// Card number. Required if cardTrack set. Can be null.
    #[serde(rename = "cardNumber", skip_serializing_if = "Option::is_none")]
    pub card_number: Option<String>,
    /// Customer name. Can be null.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Customer middle name. Can be null.
    #[serde(rename = "middleName", skip_serializing_if = "Option::is_none")]
    pub middle_name: Option<String>,
    /// Customer surname. Can be null.
    #[serde(rename = "surName", skip_serializing_if = "Option::is_none")]
    pub sur_name: Option<String>,
    /// Customer birthday.
    #[serde(
        rename = "birthday",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub birthday: Option<Option<String>>,
    /// Customer email. Can be null.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Customer sex.  <br>0 - not specified,<br />1 - male,<br />2 - female.
    #[serde(rename = "sex", skip_serializing_if = "Option::is_none")]
    pub sex: Option<models::UserSex>,
    /// Customer consent status.  <br>0 - unknown,<br />1 - given,<br />2 - revoked.
    #[serde(rename = "consentStatus", skip_serializing_if = "Option::is_none")]
    pub consent_status: Option<models::PersonalDataConsentStatus>,
    /// Customer get loyalty messages (email, sms). If the parameter is not specified for new customers, the value 'true' is used.
    #[serde(
        rename = "shouldReceiveLoyaltyInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub should_receive_loyalty_info: Option<Option<bool>>,
    /// Customer get promo messages (email, sms). If the parameter is not specified for new customers, the value 'true' is used.
    #[serde(
        rename = "shouldReceivePromoActionsInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub should_receive_promo_actions_info: Option<Option<bool>>,
    /// Id for referrer guest. Null for old integrations, Guid.Empty - for referrer deletion. Can be null.
    #[serde(rename = "referrerId", skip_serializing_if = "Option::is_none")]
    pub referrer_id: Option<String>,
    /// Customer user data. Can be null.
    #[serde(rename = "userData", skip_serializing_if = "Option::is_none")]
    pub user_data: Option<String>,
    /// Customer logical deletion flag.
    #[serde(
        rename = "isDeleted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted: Option<Option<bool>>,
    /// Customer organization id.
    #[serde(rename = "organizationId")]
    pub organization_id: uuid::Uuid,
}

impl CreateOrUpdateCustomerRequest {
    /// Not empty `phone` or `magnetCardTrack` or `id` is required for successful import.
    pub fn new(organization_id: uuid::Uuid) -> CreateOrUpdateCustomerRequest {
        CreateOrUpdateCustomerRequest {
            id: None,
            phone: None,
            card_track: None,
            card_number: None,
            name: None,
            middle_name: None,
            sur_name: None,
            birthday: None,
            email: None,
            sex: None,
            consent_status: None,
            should_receive_loyalty_info: None,
            should_receive_promo_actions_info: None,
            referrer_id: None,
            user_data: None,
            is_deleted: None,
            organization_id,
        }
    }
}
