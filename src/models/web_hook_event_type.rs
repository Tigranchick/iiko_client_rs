/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebHookEventType : Types of events which can be notified by a webhook.
/// Types of events which can be notified by a webhook.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WebHookEventType {
    #[serde(rename = "DeliveryOrderUpdate")]
    DeliveryOrderUpdate,
    #[serde(rename = "DeliveryOrderError")]
    DeliveryOrderError,
    #[serde(rename = "ReserveUpdate")]
    ReserveUpdate,
    #[serde(rename = "ReserveError")]
    ReserveError,
    #[serde(rename = "TableOrderUpdate")]
    TableOrderUpdate,
    #[serde(rename = "TableOrderError")]
    TableOrderError,
    #[serde(rename = "StopListUpdate")]
    StopListUpdate,
    #[serde(rename = "PersonalShift")]
    PersonalShift,
    #[serde(rename = "KitchenOrderUpdate")]
    KitchenOrderUpdate,
    #[serde(rename = "NomenclatureUpdate")]
    NomenclatureUpdate,
}

impl std::fmt::Display for WebHookEventType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::DeliveryOrderUpdate => write!(f, "DeliveryOrderUpdate"),
            Self::DeliveryOrderError => write!(f, "DeliveryOrderError"),
            Self::ReserveUpdate => write!(f, "ReserveUpdate"),
            Self::ReserveError => write!(f, "ReserveError"),
            Self::TableOrderUpdate => write!(f, "TableOrderUpdate"),
            Self::TableOrderError => write!(f, "TableOrderError"),
            Self::StopListUpdate => write!(f, "StopListUpdate"),
            Self::PersonalShift => write!(f, "PersonalShift"),
            Self::KitchenOrderUpdate => write!(f, "KitchenOrderUpdate"),
            Self::NomenclatureUpdate => write!(f, "NomenclatureUpdate"),
        }
    }
}

impl Default for WebHookEventType {
    fn default() -> WebHookEventType {
        Self::DeliveryOrderUpdate
    }
}
