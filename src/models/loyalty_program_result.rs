/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LoyaltyProgramResult : Loyalty result for order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoyaltyProgramResult {
    /// Program marketing campaign id.
    #[serde(
        rename = "marketingCampaignId",
        skip_serializing_if = "Option::is_none"
    )]
    pub marketing_campaign_id: Option<uuid::Uuid>,
    /// Program name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Discount operations applied to order items.
    #[serde(rename = "discounts", skip_serializing_if = "Option::is_none")]
    pub discounts: Option<Vec<models::DiscountOperation>>,
    /// Suggested items to add or advices for customer.
    #[serde(rename = "upsales", skip_serializing_if = "Option::is_none")]
    pub upsales: Option<Vec<models::Upsale>>,
    /// Program free products.
    #[serde(rename = "freeProducts", skip_serializing_if = "Option::is_none")]
    pub free_products: Option<Vec<models::FreeProductsGroup>>,
    /// Ids of combo specification available in current order.
    #[serde(
        rename = "availableComboSpecifications",
        skip_serializing_if = "Option::is_none"
    )]
    pub available_combo_specifications: Option<Vec<uuid::Uuid>>,
    /// Partially added combos, available for assembly.
    #[serde(rename = "availableCombos", skip_serializing_if = "Option::is_none")]
    pub available_combos: Option<Vec<models::AvailableCombo>>,
    /// Certificate number is required for activation.
    #[serde(
        rename = "needToActivateCertificate",
        skip_serializing_if = "Option::is_none"
    )]
    pub need_to_activate_certificate: Option<bool>,
}

impl LoyaltyProgramResult {
    /// Loyalty result for order.
    pub fn new() -> LoyaltyProgramResult {
        LoyaltyProgramResult {
            marketing_campaign_id: None,
            name: None,
            discounts: None,
            upsales: None,
            free_products: None,
            available_combo_specifications: None,
            available_combos: None,
            need_to_activate_certificate: None,
        }
    }
}
