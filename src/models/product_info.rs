/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ProductInfo : DTO for outside transferring of external menu item details.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductInfo {
    /// Fat per 100g.
    #[serde(
        rename = "fatAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub fat_amount: Option<Option<f64>>,
    /// Protein per 100g.
    #[serde(
        rename = "proteinsAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub proteins_amount: Option<Option<f64>>,
    /// Carbohydrate per 100g.
    #[serde(
        rename = "carbohydratesAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub carbohydrates_amount: Option<Option<f64>>,
    /// Calories per 100g.
    #[serde(
        rename = "energyAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub energy_amount: Option<Option<f64>>,
    /// Fat per item.
    #[serde(
        rename = "fatFullAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub fat_full_amount: Option<Option<f64>>,
    /// Protein per item.
    #[serde(
        rename = "proteinsFullAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub proteins_full_amount: Option<Option<f64>>,
    /// Carbohydrate per item.
    #[serde(
        rename = "carbohydratesFullAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub carbohydrates_full_amount: Option<Option<f64>>,
    /// Calories per item.
    #[serde(
        rename = "energyFullAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub energy_full_amount: Option<Option<f64>>,
    /// Item weight.
    #[serde(
        rename = "weight",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub weight: Option<Option<f64>>,
    /// Stock list group in RMS.
    #[serde(
        rename = "groupId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub group_id: Option<Option<uuid::Uuid>>,
    /// Product category in RMS.
    #[serde(
        rename = "productCategoryId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub product_category_id: Option<Option<uuid::Uuid>>,
    /// dish | good | modifier.
    #[serde(
        rename = "type",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub r#type: Option<Option<String>>,
    /// Product or compound. Depends on modifiers scheme existence.
    #[serde(rename = "orderItemType", skip_serializing_if = "Option::is_none")]
    pub order_item_type: Option<models::OrderItemType>,
    /// Modifier schema's ID.
    #[serde(
        rename = "modifierSchemaId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub modifier_schema_id: Option<Option<uuid::Uuid>>,
    /// Modifier schema's name.
    #[serde(
        rename = "modifierSchemaName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub modifier_schema_name: Option<Option<String>>,
    /// Is product splittable.
    #[serde(rename = "splittable")]
    pub splittable: bool,
    /// Item's unit of measurement.
    #[serde(rename = "measureUnit", skip_serializing_if = "Option::is_none")]
    pub measure_unit: Option<String>,
    /// Prices.
    #[serde(rename = "sizePrices", skip_serializing_if = "Option::is_none")]
    pub size_prices: Option<Vec<models::SizePrice>>,
    /// Modifiers.
    #[serde(rename = "modifiers", skip_serializing_if = "Option::is_none")]
    pub modifiers: Option<Vec<models::SimpleModifierInfo>>,
    /// Modifier groups.
    #[serde(rename = "groupModifiers", skip_serializing_if = "Option::is_none")]
    pub group_modifiers: Option<Vec<models::GroupModifierInfo>>,
    /// Links to images.
    #[serde(rename = "imageLinks", skip_serializing_if = "Option::is_none")]
    pub image_links: Option<Vec<String>>,
    /// Do not print on bill.
    #[serde(rename = "doNotPrintInCheque", skip_serializing_if = "Option::is_none")]
    pub do_not_print_in_cheque: Option<bool>,
    /// External menu group.
    #[serde(
        rename = "parentGroup",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_group: Option<Option<uuid::Uuid>>,
    /// Product's order (priority) in menu.
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    /// Full name in a foreign language.
    #[serde(
        rename = "fullNameEnglish",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub full_name_english: Option<Option<String>>,
    /// Weighed product.
    #[serde(rename = "useBalanceForSell")]
    pub use_balance_for_sell: bool,
    /// Open price.
    #[serde(rename = "canSetOpenPrice")]
    pub can_set_open_price: bool,
    /// Payment subject.
    #[serde(
        rename = "paymentSubject",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payment_subject: Option<Option<String>>,
    /// ID.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// SKU.
    #[serde(
        rename = "code",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<Option<String>>,
    /// Name.
    #[serde(rename = "name")]
    pub name: String,
    /// Description.
    #[serde(
        rename = "description",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<Option<String>>,
    /// Additional information.
    #[serde(
        rename = "additionalInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_info: Option<Option<String>>,
    /// Tags.
    #[serde(
        rename = "tags",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tags: Option<Option<Vec<String>>>,
    /// Is-Deleted attribute.
    #[serde(rename = "isDeleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    /// SEO description for client.
    #[serde(
        rename = "seoDescription",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub seo_description: Option<Option<String>>,
    /// SEO text for robots.
    #[serde(
        rename = "seoText",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub seo_text: Option<Option<String>>,
    /// SEO key words.
    #[serde(
        rename = "seoKeywords",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub seo_keywords: Option<Option<String>>,
    /// SEO header.
    #[serde(
        rename = "seoTitle",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub seo_title: Option<Option<String>>,
}

impl ProductInfo {
    /// DTO for outside transferring of external menu item details.
    pub fn new(
        splittable: bool,
        use_balance_for_sell: bool,
        can_set_open_price: bool,
        id: uuid::Uuid,
        name: String,
    ) -> ProductInfo {
        ProductInfo {
            fat_amount: None,
            proteins_amount: None,
            carbohydrates_amount: None,
            energy_amount: None,
            fat_full_amount: None,
            proteins_full_amount: None,
            carbohydrates_full_amount: None,
            energy_full_amount: None,
            weight: None,
            group_id: None,
            product_category_id: None,
            r#type: None,
            order_item_type: None,
            modifier_schema_id: None,
            modifier_schema_name: None,
            splittable,
            measure_unit: None,
            size_prices: None,
            modifiers: None,
            group_modifiers: None,
            image_links: None,
            do_not_print_in_cheque: None,
            parent_group: None,
            order: None,
            full_name_english: None,
            use_balance_for_sell,
            can_set_open_price,
            payment_subject: None,
            id,
            code: None,
            name,
            description: None,
            additional_info: None,
            tags: None,
            is_deleted: None,
            seo_description: None,
            seo_text: None,
            seo_keywords: None,
            seo_title: None,
        }
    }
}
