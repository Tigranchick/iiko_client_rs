/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EmployeeWithCheckedRole : Employee DTO.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmployeeWithCheckedRole {
    /// Result of check employee's roles.
    #[serde(rename = "checkRolesResult", skip_serializing_if = "Option::is_none")]
    pub check_roles_result: Option<Vec<models::RoleCheckResult>>,
    /// Employee ID.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Name of user.
    #[serde(
        rename = "firstName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub first_name: Option<Option<String>>,
    /// Second name.
    #[serde(
        rename = "middleName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub middle_name: Option<Option<String>>,
    /// Last name.
    #[serde(
        rename = "lastName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_name: Option<Option<String>>,
    /// Displayed name (system name).
    #[serde(
        rename = "displayName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<Option<String>>,
    /// Code.
    #[serde(
        rename = "code",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<Option<String>>,
    /// User deletion flag.
    #[serde(rename = "isDeleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
}

impl EmployeeWithCheckedRole {
    /// Employee DTO.
    pub fn new(id: uuid::Uuid) -> EmployeeWithCheckedRole {
        EmployeeWithCheckedRole {
            check_roles_result: None,
            id,
            first_name: None,
            middle_name: None,
            last_name: None,
            display_name: None,
            code: None,
            is_deleted: None,
        }
    }
}
