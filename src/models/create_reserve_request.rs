/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateReserveRequest : Banquet/reserve creation model.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateReserveRequest {
    /// Organization ID of a new banquet/reserve.                Can be obtained by `/api/1/organizations` operation.
    #[serde(rename = "organizationId")]
    pub organization_id: uuid::Uuid,
    /// Front group ID an banquet/reserve must be sent to.                Can be obtained by `/api/1/terminal_groups` operation.
    #[serde(rename = "terminalGroupId", skip_serializing_if = "Option::is_none")]
    pub terminal_group_id: Option<uuid::Uuid>,
    /// Banquet/reserve ID. Must be unique.
    #[serde(
        rename = "id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub id: Option<Option<uuid::Uuid>>,
    /// Banquet/reserve external number.   > Allowed from version `8.0.6`.
    #[serde(
        rename = "externalNumber",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_number: Option<Option<String>>,
    /// Order Used only at a banquet.
    #[serde(
        rename = "order",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order: Option<Option<Box<models::RequestReserveOrder>>>,
    /// Customer.
    #[serde(rename = "customer")]
    pub customer: Box<models::RequestCreateOrderRegularCustomer>,
    /// Telephone number.  > Must begin with symbol \"+\" and must be at least 8 digits.
    #[serde(rename = "phone")]
    pub phone: String,
    /// Number of guests.
    #[serde(
        rename = "guestsCount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub guests_count: Option<Option<i32>>,
    /// Banquet/reserve comment.
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
    /// Estimated banquet duration.
    #[serde(rename = "durationInMinutes")]
    pub duration_in_minutes: i64,
    /// Whether to remind staff to prepare table beforehand.
    #[serde(rename = "shouldRemind")]
    pub should_remind: bool,
    /// Reserved tables.
    #[serde(rename = "tableIds")]
    pub table_ids: Vec<uuid::Uuid>,
    /// Estimated time when reserve will be closed or banquet will be started (Local for the terminal).  Reservation can be made up to 90 days prior to the date.
    #[serde(rename = "estimatedStartTime")]
    pub estimated_start_time: String,
    /// Timeout in seconds that specifies how much time is given for banquet/reserve to reach iikoFront.   After this time, banquet/reserve is nullified if iikoFront doesn't take it. By default - 8 seconds.
    #[serde(
        rename = "transportToFrontTimeout",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub transport_to_front_timeout: Option<Option<i32>>,
    /// Guests information.
    #[serde(
        rename = "guests",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub guests: Option<Option<Box<models::GuestsInfo>>>,
    /// Event type.   > Allowed from version `8.5.6`.
    #[serde(
        rename = "eventType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_type: Option<Option<String>>,
    /// Reserve creation parameters.
    #[serde(
        rename = "createReserveSettings",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub create_reserve_settings: Option<Option<Box<models::CreateOrderSettings>>>,
}

impl CreateReserveRequest {
    /// Banquet/reserve creation model.
    pub fn new(
        organization_id: uuid::Uuid,
        customer: models::RequestCreateOrderRegularCustomer,
        phone: String,
        duration_in_minutes: i64,
        should_remind: bool,
        table_ids: Vec<uuid::Uuid>,
        estimated_start_time: String,
    ) -> CreateReserveRequest {
        CreateReserveRequest {
            organization_id,
            terminal_group_id: None,
            id: None,
            external_number: None,
            order: None,
            customer: Box::new(customer),
            phone,
            guests_count: None,
            comment: None,
            duration_in_minutes,
            should_remind,
            table_ids,
            estimated_start_time,
            transport_to_front_timeout: None,
            guests: None,
            event_type: None,
            create_reserve_settings: None,
        }
    }
}
