/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderCompoundOrderItem : Order item: composite item.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderCompoundOrderItem {
    /// Main component.
    #[serde(rename = "primaryComponent")]
    pub primary_component: Box<models::OrderCompoundOrderItemComponent>,
    /// Additional component.
    #[serde(
        rename = "secondaryComponent",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub secondary_component: Option<Option<Box<models::OrderCompoundOrderItemComponent>>>,
    /// Indivisible modifiers.
    #[serde(
        rename = "commonModifiers",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub common_modifiers: Option<Option<Vec<models::OrderItemModifier>>>,
    /// Modifier scheme.
    #[serde(
        rename = "template",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub template: Option<Option<Box<models::OrderCompoundItemTemplate>>>,

    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Item cooking status.
    #[serde(rename = "status")]
    pub status: models::OrderItemStatus,
    /// Item deletion details. If filled up, item is deleted.
    #[serde(
        rename = "deleted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub deleted: Option<Option<Box<models::OrderItemDeletedInfo>>>,
    /// Quantity.
    #[serde(rename = "amount")]
    pub amount: f64,
    /// Comment.
    #[serde(
        rename = "comment",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub comment: Option<Option<String>>,
    /// Printing time (Local for the terminal).
    #[serde(
        rename = "whenPrinted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_printed: Option<Option<String>>,
    /// Size.
    #[serde(
        rename = "size",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub size: Option<Option<Box<models::OrderProductSize>>>,
    /// Combo details, if order item is part of combo.
    #[serde(
        rename = "comboInformation",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub combo_information: Option<Option<Box<models::OrderComboItemInformation>>>,
}

impl OrderCompoundOrderItem {
    /// Order item: composite item.
    pub fn new(
        primary_component: models::OrderCompoundOrderItemComponent,
        r#type: String,
        status: models::OrderItemStatus,
        amount: f64,
    ) -> OrderCompoundOrderItem {
        OrderCompoundOrderItem {
            primary_component: Box::new(primary_component),
            secondary_component: None,
            common_modifiers: None,
            template: None,
            r#type: Some(r#type),
            status,
            deleted: None,
            amount,
            comment: None,
            when_printed: None,
            size: None,
            combo_information: None,
        }
    }
}
