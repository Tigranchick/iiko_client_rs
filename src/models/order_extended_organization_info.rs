/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderExtendedOrganizationInfo : Organization details.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderExtendedOrganizationInfo {
    /// Country.
    #[serde(rename = "country", deserialize_with = "Option::deserialize")]
    pub country: Option<String>,
    /// Restaurant address.
    #[serde(rename = "restaurantAddress", deserialize_with = "Option::deserialize")]
    pub restaurant_address: Option<String>,
    /// Latitude.
    #[serde(rename = "latitude")]
    pub latitude: f64,
    /// Longitude.
    #[serde(rename = "longitude")]
    pub longitude: f64,
    /// Regional setting \"Use the UAE Addressing System\".
    #[serde(rename = "useUaeAddressingSystem")]
    pub use_uae_addressing_system: bool,
    /// RMS version.
    #[serde(rename = "version")]
    pub version: String,
    /// ISO currency code (for example: RUB, USD, EUR).
    #[serde(rename = "currencyIsoName", deserialize_with = "Option::deserialize")]
    pub currency_iso_name: Option<String>,
    /// Value rounding of position.
    #[serde(
        rename = "currencyMinimumDenomination",
        deserialize_with = "Option::deserialize"
    )]
    pub currency_minimum_denomination: Option<f64>,
    /// Country dialing code.
    #[serde(rename = "countryPhoneCode", deserialize_with = "Option::deserialize")]
    pub country_phone_code: Option<String>,
    /// Require mandatory marketing source input when creating a delivery.
    #[serde(
        rename = "marketingSourceRequiredInDelivery",
        deserialize_with = "Option::deserialize"
    )]
    pub marketing_source_required_in_delivery: Option<bool>,
    /// Default delivery city.
    #[serde(
        rename = "defaultDeliveryCityId",
        deserialize_with = "Option::deserialize"
    )]
    pub default_delivery_city_id: Option<uuid::Uuid>,
    /// Delivery cities.
    #[serde(rename = "deliveryCityIds", deserialize_with = "Option::deserialize")]
    pub delivery_city_ids: Option<Vec<uuid::Uuid>>,
    /// Delivery type.
    #[serde(
        rename = "deliveryServiceType",
        deserialize_with = "Option::deserialize"
    )]
    pub delivery_service_type: Option<models::OrderDeliverySettingsServiceType>,
    /// Delivery order payment settings.
    #[serde(
        rename = "deliveryOrderPaymentSettings",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_order_payment_settings: Option<Option<models::OrderDeliveryOrderPaymentSettings>>,
    /// Default payment type for CallCenter.
    #[serde(
        rename = "defaultCallCenterPaymentTypeId",
        deserialize_with = "Option::deserialize"
    )]
    pub default_call_center_payment_type_id: Option<uuid::Uuid>,
    /// Allow text comments for order items (in all restaurant sections).
    #[serde(
        rename = "orderItemCommentEnabled",
        deserialize_with = "Option::deserialize"
    )]
    pub order_item_comment_enabled: Option<bool>,
    /// Restaurant`s INN (Taxpayer Identification Number).
    #[serde(rename = "inn", deserialize_with = "Option::deserialize")]
    pub inn: Option<String>,
    /// Address format type.
    #[serde(rename = "addressFormatType")]
    pub address_format_type: models::OrderAddressFormatType,
    /// Determines whether to use delivery confirmation.
    #[serde(
        rename = "isConfirmationEnabled",
        deserialize_with = "Option::deserialize"
    )]
    pub is_confirmation_enabled: Option<bool>,
    /// Confirm orders time interval.
    #[serde(
        rename = "confirmAllowedIntervalInMinutes",
        deserialize_with = "Option::deserialize"
    )]
    pub confirm_allowed_interval_in_minutes: Option<i32>,
    /// Determines whether organization is hosted in iikoCloud.
    #[serde(rename = "isCloud")]
    pub is_cloud: bool,
    /// If the store allows orders for anonymous guests, then it is not necessary to transfer  information about the guest as part of the delivery order. You can only transfer  the phone number and optionally name of the guest, which will not be stored in the guest base  and will only be used for the delivery of a current delivery order.
    #[serde(
        rename = "isAnonymousGuestsAllowed",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_anonymous_guests_allowed: Option<bool>,
    /// Available address lookup services.
    #[serde(rename = "addressLookup")]
    pub address_lookup: Vec<models::AddressHintsServiceType>,
    #[serde(rename = "responseType")]
    pub response_type: String,
    /// Organization ID.                Can be obtained by `/api/1/organizations` operation.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Organization name.
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    /// Organization`s code.
    #[serde(
        rename = "code",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub code: Option<Option<String>>,
    /// Organization`s external data.
    #[serde(
        rename = "externalData",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_data: Option<Option<Vec<models::ExternalData>>>,
}

impl OrderExtendedOrganizationInfo {
    /// Organization details.
    pub fn new(
        country: Option<String>,
        restaurant_address: Option<String>,
        latitude: f64,
        longitude: f64,
        use_uae_addressing_system: bool,
        version: String,
        currency_iso_name: Option<String>,
        currency_minimum_denomination: Option<f64>,
        country_phone_code: Option<String>,
        marketing_source_required_in_delivery: Option<bool>,
        default_delivery_city_id: Option<uuid::Uuid>,
        delivery_city_ids: Option<Vec<uuid::Uuid>>,
        delivery_service_type: Option<models::OrderDeliverySettingsServiceType>,
        default_call_center_payment_type_id: Option<uuid::Uuid>,
        order_item_comment_enabled: Option<bool>,
        inn: Option<String>,
        address_format_type: models::OrderAddressFormatType,
        is_confirmation_enabled: Option<bool>,
        confirm_allowed_interval_in_minutes: Option<i32>,
        is_cloud: bool,
        address_lookup: Vec<models::AddressHintsServiceType>,
        response_type: String,
        id: uuid::Uuid,
        name: Option<String>,
    ) -> OrderExtendedOrganizationInfo {
        OrderExtendedOrganizationInfo {
            country,
            restaurant_address,
            latitude,
            longitude,
            use_uae_addressing_system,
            version,
            currency_iso_name,
            currency_minimum_denomination,
            country_phone_code,
            marketing_source_required_in_delivery,
            default_delivery_city_id,
            delivery_city_ids,
            delivery_service_type,
            delivery_order_payment_settings: None,
            default_call_center_payment_type_id,
            order_item_comment_enabled,
            inn,
            address_format_type,
            is_confirmation_enabled,
            confirm_allowed_interval_in_minutes,
            is_cloud,
            is_anonymous_guests_allowed: None,
            address_lookup,
            response_type,
            id,
            name,
            code: None,
            external_data: None,
        }
    }
}
