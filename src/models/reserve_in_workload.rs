/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReserveInWorkload : Banquet/reserve.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReserveInWorkload {
    /// Banquet/reserve ID.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Reserved tables.
    #[serde(rename = "tableIds")]
    pub table_ids: Vec<uuid::Uuid>,
    /// Estimated time when reserve will be closed or banquet will be started (Local for the terminal).
    #[serde(rename = "estimatedStartTime")]
    pub estimated_start_time: String,
    /// Estimated banquet duration.
    #[serde(rename = "durationInMinutes")]
    pub duration_in_minutes: i64,
    /// Number of guests.
    #[serde(rename = "guestsCount")]
    pub guests_count: i32,
}

impl ReserveInWorkload {
    /// Banquet/reserve.
    pub fn new(
        id: uuid::Uuid,
        table_ids: Vec<uuid::Uuid>,
        estimated_start_time: String,
        duration_in_minutes: i64,
        guests_count: i32,
    ) -> ReserveInWorkload {
        ReserveInWorkload {
            id,
            table_ids,
            estimated_start_time,
            duration_in_minutes,
            guests_count,
        }
    }
}
