/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrdersByDeliveryDateAndFilterRequest : Request for information about orders from external source and based on additional filters.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrdersByDeliveryDateAndFilterRequest {
    /// Organization ID for which an order search will be performed.                Can be obtained by `/api/1/organizations` operation.
    #[serde(rename = "organizationIds")]
    pub organization_ids: Vec<uuid::Uuid>,
    /// List of terminal groups IDs.
    #[serde(
        rename = "terminalGroupIds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub terminal_group_ids: Option<Option<Vec<uuid::Uuid>>>,
    /// Order delivery date (Local for delivery terminal). Lower limit.                The guaranteed order availability  is the last 7 days. To access earlier orders, use the `/api/1/deliveries/history/by_delivery_date_and_phone` method.
    #[serde(
        rename = "deliveryDateFrom",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_date_from: Option<Option<String>>,
    /// Order delivery date (Local for delivery terminal). Upper limit.
    #[serde(
        rename = "deliveryDateTo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_date_to: Option<Option<String>>,
    /// Allowed order statuses.
    #[serde(
        rename = "statuses",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub statuses: Option<Option<Vec<models::DeliveryStatus>>>,
    /// If true, delivery has a problem.  > Conditions under which the order has a problem:  > * order.problem.hasProblem is true;  > * order status is Unconfirmed and CookingStartTime before now;  > * order status is ReadyForCooking and (CookingStartTime + timeToCookingErrorTimeout) before now;  > * order status is CookingCompleted or Waiting and (CookingStartTime + cookingTimeout) before now.
    #[serde(
        rename = "hasProblem",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub has_problem: Option<Option<bool>>,
    /// Order service type.
    #[serde(
        rename = "orderServiceType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_service_type: Option<Option<models::RequestCreateOrderServiceType>>,
    /// Value for search. Used for prefix search.
    #[serde(
        rename = "searchText",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub search_text: Option<Option<String>>,
    /// Error timeout for status time to cooking, in seconds.
    #[serde(
        rename = "timeToCookingErrorTimeout",
        skip_serializing_if = "Option::is_none"
    )]
    pub time_to_cooking_error_timeout: Option<i32>,
    /// Expected cooking time, in seconds.
    #[serde(rename = "cookingTimeout", skip_serializing_if = "Option::is_none")]
    pub cooking_timeout: Option<i32>,
    /// Sorting property.
    #[serde(rename = "sortProperty", skip_serializing_if = "Option::is_none")]
    pub sort_property: Option<models::RequestOrderSortProperty>,
    /// Sorting direction.
    #[serde(rename = "sortDirection", skip_serializing_if = "Option::is_none")]
    pub sort_direction: Option<models::SortDirection>,
    /// Maximum number of items returned.
    #[serde(rename = "rowsCount", skip_serializing_if = "Option::is_none")]
    pub rows_count: Option<i32>,
    /// Source keys.
    #[serde(
        rename = "sourceKeys",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_keys: Option<Option<Vec<String>>>,
    /// Order IDs.                > Must be null if \"posOrderIds\" is not null.
    #[serde(
        rename = "orderIds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_ids: Option<Option<Vec<uuid::Uuid>>>,
    /// POS order IDs.                > Must be null if \"orderIds\" is not null.
    #[serde(
        rename = "posOrderIds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub pos_order_ids: Option<Option<Vec<uuid::Uuid>>>,
}

impl OrdersByDeliveryDateAndFilterRequest {
    /// Request for information about orders from external source and based on additional filters.
    pub fn new(organization_ids: Vec<uuid::Uuid>) -> OrdersByDeliveryDateAndFilterRequest {
        OrdersByDeliveryDateAndFilterRequest {
            organization_ids,
            terminal_group_ids: None,
            delivery_date_from: None,
            delivery_date_to: None,
            statuses: None,
            has_problem: None,
            order_service_type: None,
            search_text: None,
            time_to_cooking_error_timeout: None,
            cooking_timeout: None,
            sort_property: None,
            sort_direction: None,
            rows_count: None,
            source_keys: None,
            order_ids: None,
            pos_order_ids: None,
        }
    }
}
