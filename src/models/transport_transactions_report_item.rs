/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TransportTransactionsReportItem : Transactions report item.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransportTransactionsReportItem {
    /// Api client login. Can be null.
    #[serde(rename = "apiClientLogin", skip_serializing_if = "Option::is_none")]
    pub api_client_login: Option<String>,
    /// Balance after.
    #[serde(
        rename = "balanceAfter",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_after: Option<Option<f64>>,
    /// Balance before.
    #[serde(
        rename = "balanceBefore",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub balance_before: Option<Option<f64>>,
    /// Block reason. Can be null.
    #[serde(rename = "blockReason", skip_serializing_if = "Option::is_none")]
    pub block_reason: Option<String>,
    /// Certificate.
    #[serde(rename = "certificate", skip_serializing_if = "Option::is_none")]
    pub certificate: Option<Box<models::TransportTransactionsCertificateReportItem>>,
    /// Comment. Can be null.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Counteragent. Can be null.
    #[serde(rename = "counteragent", skip_serializing_if = "Option::is_none")]
    pub counteragent: Option<String>,
    /// Counteragent type.
    #[serde(
        rename = "counteragentType",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub counteragent_type: Option<Option<models::CertificateCounteragentType>>,
    /// Counteragent type name. Can be null.
    #[serde(
        rename = "counteragentTypeName",
        skip_serializing_if = "Option::is_none"
    )]
    pub counteragent_type_name: Option<String>,
    /// Coupon.
    #[serde(rename = "coupon", skip_serializing_if = "Option::is_none")]
    pub coupon: Option<Box<models::TransportTransactionsCouponReportItem>>,
    /// Emitent name. Can be null.
    #[serde(rename = "emitentName", skip_serializing_if = "Option::is_none")]
    pub emitent_name: Option<String>,
    /// Loyalty user. Can be null.
    #[serde(rename = "loyaltyUser", skip_serializing_if = "Option::is_none")]
    pub loyalty_user: Option<String>,
    /// Marketing campaign id.
    #[serde(
        rename = "marketingCampaignId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub marketing_campaign_id: Option<Option<uuid::Uuid>>,
    /// Nominal.
    #[serde(
        rename = "nominal",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub nominal: Option<Option<f64>>,
    /// Order number.
    #[serde(
        rename = "orderNumber",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_number: Option<Option<i32>>,
    /// Order sum.
    #[serde(
        rename = "orderSum",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_sum: Option<Option<f64>>,
    /// Organization id.
    #[serde(rename = "organizationId", deserialize_with = "Option::deserialize")]
    pub organization_id: Option<uuid::Uuid>,
    /// Pos balance before.
    #[serde(
        rename = "posBalanceBefore",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub pos_balance_before: Option<Option<f64>>,
    /// Program id.
    #[serde(
        rename = "programId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub program_id: Option<Option<uuid::Uuid>>,
    /// Sum.
    #[serde(rename = "sum", skip_serializing_if = "Option::is_none")]
    pub sum: Option<f64>,
    /// Type.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::TransactionType>,
    /// Type name. Can be null.
    #[serde(rename = "typeName", skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
    /// Wallet id.
    #[serde(
        rename = "walletId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub wallet_id: Option<Option<uuid::Uuid>>,
    /// When created.
    #[serde(rename = "whenCreated", skip_serializing_if = "Option::is_none")]
    pub when_created: Option<String>,
    /// When created order.
    #[serde(
        rename = "whenCreatedOrder",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub when_created_order: Option<Option<String>>,
    /// Id.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Is delivery.
    #[serde(
        rename = "isDelivery",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_delivery: Option<Option<bool>>,
    /// Is ignored.
    #[serde(rename = "isIgnored", skip_serializing_if = "Option::is_none")]
    pub is_ignored: Option<bool>,
    /// Pos order id.
    #[serde(
        rename = "posOrderId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub pos_order_id: Option<Option<uuid::Uuid>>,
    /// Revision.
    #[serde(rename = "revision")]
    pub revision: i64,
    /// Terminal group id.
    #[serde(
        rename = "terminalGroupId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub terminal_group_id: Option<Option<uuid::Uuid>>,
}

impl TransportTransactionsReportItem {
    /// Transactions report item.
    pub fn new(
        organization_id: Option<uuid::Uuid>,
        id: uuid::Uuid,
        revision: i64,
    ) -> TransportTransactionsReportItem {
        TransportTransactionsReportItem {
            api_client_login: None,
            balance_after: None,
            balance_before: None,
            block_reason: None,
            certificate: None,
            comment: None,
            counteragent: None,
            counteragent_type: None,
            counteragent_type_name: None,
            coupon: None,
            emitent_name: None,
            loyalty_user: None,
            marketing_campaign_id: None,
            nominal: None,
            order_number: None,
            order_sum: None,
            organization_id,
            pos_balance_before: None,
            program_id: None,
            sum: None,
            r#type: None,
            type_name: None,
            wallet_id: None,
            when_created: None,
            when_created_order: None,
            id,
            is_delivery: None,
            is_ignored: None,
            pos_order_id: None,
            revision,
            terminal_group_id: None,
        }
    }
}
