/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChequeAdditionalInfo : Cheque additional information according to russian federal law #54.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChequeAdditionalInfo {
    /// Whether paper cheque should be printed.
    #[serde(rename = "needReceipt")]
    pub need_receipt: bool,
    /// Email to send cheque information or null if the cheque shouldn't be sent by email.
    #[serde(
        rename = "email",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub email: Option<Option<String>>,
    /// Settlement place.
    #[serde(
        rename = "settlementPlace",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub settlement_place: Option<Option<String>>,
    /// Phone to send cheque information (by sms) or null if the cheque shouldn't be sent by sms.
    #[serde(
        rename = "phone",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub phone: Option<Option<String>>,
}

impl ChequeAdditionalInfo {
    /// Cheque additional information according to russian federal law #54.
    pub fn new(need_receipt: bool) -> ChequeAdditionalInfo {
        ChequeAdditionalInfo {
            need_receipt,
            email: None,
            settlement_place: None,
            phone: None,
        }
    }
}
