/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CalculateCheckinRequest : Request to calculate loyalty operations for order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CalculateCheckinRequest {
    /// Order details.
    #[serde(rename = "order")]
    pub order: Box<models::RequestCreateOrder>,
    /// Number of applied coupon. Can be null.
    #[serde(rename = "coupon", skip_serializing_if = "Option::is_none")]
    pub coupon: Option<String>,
    /// Referrer id.
    #[serde(
        rename = "referrerId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub referrer_id: Option<Option<uuid::Uuid>>,
    /// Identifier of a target terminal. Should be used only when auto distribution is off and no call center operator is available.
    #[serde(
        rename = "terminalGroupId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub terminal_group_id: Option<Option<uuid::Uuid>>,
    /// List of identifiers of applied campaigns. Should be empty if no payment method is used.
    #[serde(
        rename = "availablePaymentMarketingCampaignIds",
        skip_serializing_if = "Option::is_none"
    )]
    pub available_payment_marketing_campaign_ids: Option<Vec<uuid::Uuid>>,
    /// List of manually applied to order conditions.
    #[serde(
        rename = "applicableManualConditions",
        skip_serializing_if = "Option::is_none"
    )]
    pub applicable_manual_conditions: Option<Vec<uuid::Uuid>>,
    /// Applicable manual discounts.
    #[serde(rename = "dynamicDiscounts", skip_serializing_if = "Option::is_none")]
    pub dynamic_discounts: Option<Vec<models::DynamicDiscount>>,
    /// Loyalty trace is enabled.
    #[serde(
        rename = "isLoyaltyTraceEnabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_loyalty_trace_enabled: Option<bool>,
    /// Organization id.
    #[serde(rename = "organizationId")]
    pub organization_id: uuid::Uuid,
}

impl CalculateCheckinRequest {
    /// Request to calculate loyalty operations for order.
    pub fn new(
        order: models::RequestCreateOrder,
        organization_id: uuid::Uuid,
    ) -> CalculateCheckinRequest {
        CalculateCheckinRequest {
            order: Box::new(order),
            coupon: None,
            referrer_id: None,
            terminal_group_id: None,
            available_payment_marketing_campaign_ids: None,
            applicable_manual_conditions: None,
            dynamic_discounts: None,
            is_loyalty_trace_enabled: None,
            organization_id,
        }
    }
}
