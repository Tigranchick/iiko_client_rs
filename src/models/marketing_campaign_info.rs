/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MarketingCampaignInfo : Marketing campaign info.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MarketingCampaignInfo {
    /// Marketing campaign id.
    #[serde(
        rename = "id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub id: Option<Option<uuid::Uuid>>,
    /// Loyalty program id.
    #[serde(
        rename = "programId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub program_id: Option<Option<uuid::Uuid>>,
    /// Loyalty program name. Can be null.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Marketing campaign description. Can be null.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Marketing campaign is active.
    #[serde(rename = "isActive", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    /// Marketing campaign works since date.
    #[serde(rename = "periodFrom", skip_serializing_if = "Option::is_none")]
    pub period_from: Option<String>,
    /// Marketing campaign works till date. Null means limitless.
    #[serde(
        rename = "periodTo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub period_to: Option<Option<String>>,
    /// Conditions and actions that will be checked when order is processed.
    #[serde(
        rename = "orderActionConditionBindings",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_action_condition_bindings:
        Option<Vec<models::MarketingCampaignActionConditionBindingInfo>>,
    /// Conditions and actions that will be checked by schedule.
    #[serde(
        rename = "periodicActionConditionBindings",
        skip_serializing_if = "Option::is_none"
    )]
    pub periodic_action_condition_bindings:
        Option<Vec<models::MarketingCampaignActionConditionBindingInfo>>,
    /// Conditions and actions that will be checked by overdraft.
    #[serde(
        rename = "overdraftActionConditionBindings",
        skip_serializing_if = "Option::is_none"
    )]
    pub overdraft_action_condition_bindings:
        Option<Vec<models::MarketingCampaignActionConditionBindingInfo>>,
    /// Conditions and actions that will be checked by guest registration.
    #[serde(
        rename = "guestRegistrationActionConditionBindings",
        skip_serializing_if = "Option::is_none"
    )]
    pub guest_registration_action_condition_bindings:
        Option<Vec<models::MarketingCampaignActionConditionBindingInfo>>,
}

impl MarketingCampaignInfo {
    /// Marketing campaign info.
    pub fn new() -> MarketingCampaignInfo {
        MarketingCampaignInfo {
            id: None,
            program_id: None,
            name: None,
            description: None,
            is_active: None,
            period_from: None,
            period_to: None,
            order_action_condition_bindings: None,
            periodic_action_condition_bindings: None,
            overdraft_action_condition_bindings: None,
            guest_registration_action_condition_bindings: None,
        }
    }
}
