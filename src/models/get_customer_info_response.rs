/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetCustomerInfoResponse : Get customer info
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCustomerInfoResponse {
    /// Guest id.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Guest referrer id.
    #[serde(
        rename = "referrerId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub referrer_id: Option<Option<uuid::Uuid>>,
    /// Guest name. Can be null.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Guest surname. Can be null.
    #[serde(rename = "surname", skip_serializing_if = "Option::is_none")]
    pub surname: Option<String>,
    /// Guest middle name. Can be null.
    #[serde(rename = "middleName", skip_serializing_if = "Option::is_none")]
    pub middle_name: Option<String>,
    /// Guest comment. Can be null.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Main customer's phone. Can be null.
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    /// Guest culture name. Can be null.
    #[serde(rename = "cultureName", skip_serializing_if = "Option::is_none")]
    pub culture_name: Option<String>,
    /// Guest birthday.
    #[serde(
        rename = "birthday",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub birthday: Option<Option<String>>,
    /// Guest email. Can be null.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Sex.  <br>0 - not specified,<br />1 - male,<br />2 - female.
    #[serde(rename = "sex", skip_serializing_if = "Option::is_none")]
    pub sex: Option<models::UserSex>,
    /// Guest consent status.  <br>0 - unknown,<br />1 - given,<br />2 - revoked.
    #[serde(rename = "consentStatus", skip_serializing_if = "Option::is_none")]
    pub consent_status: Option<models::PersonalDataConsentStatus>,
    /// Guest anonymized.
    #[serde(rename = "anonymized", skip_serializing_if = "Option::is_none")]
    pub anonymized: Option<bool>,
    /// Customer's cards.
    #[serde(rename = "cards", skip_serializing_if = "Option::is_none")]
    pub cards: Option<Vec<models::GuestCardInfo>>,
    /// Customer categories.
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<models::GuestCategoryShortInfo>>,
    /// Customer's user wallets. Contains bonus balances of different loyalty programs.
    #[serde(rename = "walletBalances", skip_serializing_if = "Option::is_none")]
    pub wallet_balances: Option<Vec<models::GuestBalanceInfo>>,
    /// Technical user data, customizable by restaurateur. Can be null.
    #[serde(rename = "userData", skip_serializing_if = "Option::is_none")]
    pub user_data: Option<String>,
    /// Customer get promo messages (email, sms). If null - unknown.
    #[serde(
        rename = "shouldReceivePromoActionsInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub should_receive_promo_actions_info: Option<Option<bool>>,
    /// Guest should receive loyalty info.
    #[serde(
        rename = "shouldReceiveLoyaltyInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub should_receive_loyalty_info: Option<Option<bool>>,
    /// Guest should receive order status info.
    #[serde(
        rename = "shouldReceiveOrderStatusInfo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub should_receive_order_status_info: Option<Option<bool>>,
    /// Guest personal data consent from.
    #[serde(
        rename = "personalDataConsentFrom",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub personal_data_consent_from: Option<Option<String>>,
    /// Guest personal data consent to.
    #[serde(
        rename = "personalDataConsentTo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub personal_data_consent_to: Option<Option<String>>,
    /// Guest personal data processing from.
    #[serde(
        rename = "personalDataProcessingFrom",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub personal_data_processing_from: Option<Option<String>>,
    /// Guest personal data processing to.
    #[serde(
        rename = "personalDataProcessingTo",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub personal_data_processing_to: Option<Option<String>>,
    /// Customer marked as deleted.
    #[serde(
        rename = "isDeleted",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted: Option<Option<bool>>,
    /// Registration date.
    #[serde(rename = "whenRegistered", skip_serializing_if = "Option::is_none")]
    pub when_registered: Option<String>,
    /// Last order date.
    #[serde(
        rename = "lastProcessedOrderDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_processed_order_date: Option<Option<String>>,
    /// First order date.
    #[serde(
        rename = "firstOrderDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub first_order_date: Option<Option<String>>,
    /// Guest last visited organization id.
    #[serde(
        rename = "lastVisitedOrganizationId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_visited_organization_id: Option<Option<uuid::Uuid>>,
    /// Guest registration organization id.
    #[serde(
        rename = "registrationOrganizationId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub registration_organization_id: Option<Option<uuid::Uuid>>,
}

impl GetCustomerInfoResponse {
    /// Get customer info
    pub fn new() -> GetCustomerInfoResponse {
        GetCustomerInfoResponse {
            id: None,
            referrer_id: None,
            name: None,
            surname: None,
            middle_name: None,
            comment: None,
            phone: None,
            culture_name: None,
            birthday: None,
            email: None,
            sex: None,
            consent_status: None,
            anonymized: None,
            cards: None,
            categories: None,
            wallet_balances: None,
            user_data: None,
            should_receive_promo_actions_info: None,
            should_receive_loyalty_info: None,
            should_receive_order_status_info: None,
            personal_data_consent_from: None,
            personal_data_consent_to: None,
            personal_data_processing_from: None,
            personal_data_processing_to: None,
            is_deleted: None,
            when_registered: None,
            last_processed_order_date: None,
            first_order_date: None,
            last_visited_organization_id: None,
            registration_organization_id: None,
        }
    }
}
