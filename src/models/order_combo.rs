/*
 * iikoCloud API
 *
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderCombo : Combo in order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderCombo {
    /// Combo ID.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Name of combo.
    #[serde(rename = "name")]
    pub name: String,
    /// Number of combos.
    #[serde(rename = "amount")]
    pub amount: i32,
    /// Price of combo. Given for 1 combo, without regard to amount.
    #[serde(rename = "price")]
    pub price: f64,
    /// Combo action ID.
    #[serde(rename = "sourceId")]
    pub source_id: uuid::Uuid,
    /// Size.
    #[serde(
        rename = "size",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub size: Option<Option<Box<models::OrderProductSize>>>,
}

impl OrderCombo {
    /// Combo in order.
    pub fn new(
        id: uuid::Uuid,
        name: String,
        amount: i32,
        price: f64,
        source_id: uuid::Uuid,
    ) -> OrderCombo {
        OrderCombo {
            id,
            name,
            amount,
            price,
            source_id,
            size: None,
        }
    }
}
